#
# psg libraries make file		Author:  Greg Brissey 
#
# make -f makepsg,  creates libparam.a libpsglib.a and s2pul for PAID 
# make -f makepsg userp,  Gets released psg sources from SCCS into current directory
#   now defunct target is micro 
# make -f makepsg dbx,  creates dbxtool version of libraries & s2pul for PAID 
# make -f makepsg prof,  creates gprof profiling version of libraries & s2pul for PAID 
# make -f makepsg lib,  creates libraries for PAID 
#
# make -f makepsg stdalone,  creates  standalone dbx psg, psg expects to files in
#			     the current directory 
#			     1. "curpar" parameter file
#			     2. "conparplus" parameter file 
#			         generated by "cat conpar global > conparplus"
#  
#
# ----->  dbx or profiling libraries are not standard release items and are
#	  NOT to be given to customers....    9/22/87  Greg Brissey
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#  NOTE: Improved makefile, dbx or profiling DO NOT require their own directory
#	 to compile properly, remove the dbx and profile sub-directories
#	 objects are hidden within the library files not directories now.
#
#	 The seperate object list for PAID and VIS are not necessary now
#	 but they were kept to list objects that are different to aid
#	 possible debugging.
#
#        To use the dbx or profile libraries use the vnmr macros
#	  seqgendbx('pulse_sequence') and seqgenprof('pulse_sequence') 
#	  respectivily.
#	  Note: these macros are not included in /vnmr/maclib, they must be
#	        placed in your own private maclib.
#
#	 Macros require latest makepsg file in /vnmr/acqbin,
#	  dbx and profile libraries must be present in /vnmr/psg !
#

# ----- sccs  & vnmr home dir, environment variables sccsdir,vnmrdir ----

# IRIX needs the definition of SHELL to work correctly
SHELL=/bin/sh
MAKEFILE= makepsg

#----  don't let make delete this libraries ------
.PRECIOUS= libpsglib.a libpsglib_dbx.a libpsglib_p.a \
	  libparam.a libparam_dbx.a libparam_p.a 	\
	  llib-lpsg.ln

# solobjdir, sourcedir, sccsdir & vnmrdir are environment variables
# sccsdir -> SCCS directory 
# vnmrdir -> vnmr directory 
# solobjdir -> /vobj/sol

SOLOBJDIR=$(solobjdir)
SRCDIR=$(sourcedir)
SCCSDIR=$(sccsdir)
VNMRDIR=$(vnmrdir)

# Shared Library version number   E.G.  3.2 -> libparam.so.3.2,libpsglib.so.3.2
SHAREDLIB_VER=$(psg_so_ver)


#------  The Real Sources for object are contained in one directory --
# for testing it is '../' normally it would be a absolute path..
SRC_DIR=$(SRCDIR)/syspsg/

#-----  Project Category Under the SCCS directory --------
# sccsdir -> SCCS directory  (e.g., /big/sccs )
# PROJCAT= vnmr/  -> directory under SCCS directory  (e.g., /big/sccs/vnmr/ )
PROJCAT=

#-- Normal operational compile flags
CFLAGS= -O -DPSG_LC
CPPFLAGS= -DSUN
LDFLAGS=
LDSOFLAGS=
TARGET_ARCH=
COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(RF_ARCH) -c
#COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.c= $(CC) $(CFLAGS) $(LDFLAGS) $(TARGET_ARCH)

VNMR_SRC_DIR= $(SRC_DIR)
XRACQ_SRC_DIR= $(SRC_DIR)
EXPPROC_SRC_DIR= $(SRC_DIR)
PSG_SRC_DIR= $(SRC_DIR)
PSGSEQ_SRC_DIR= $(SRC_DIR)
SCRIPT_SRC_DIR= $(SRC_DIR)
NCOMM_SRC_DIR= $(SRC_DIR)

#--- SCCS Sources ----
PSGSEQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)psglib/SCCS/s.
VNMR_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vnmr/SCCS/s.
XRACQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)xracq/SCCS/s.
EXPPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)expproc/SCCS/s.
PSG_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)psg/SCCS/s.
SCRIPT_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)scripts/SCCS/s.
NCOMM_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)ncomm/SCCS/s.

#----  PSG Library being updated -----
PSGLIB= libpsglib.a

#--- Link Commands for Sources Needed. -------
PSGSEQ_LN = ln -s $(PSGSEQ_SRC_DIR)$(@)
VNMR_LN = ln -s $(VNMR_SRC_DIR)$(@)
XRACQ_LN = ln -s $(XRACQ_SRC_DIR)$(@)
EXPPROC_LN = ln -s $(EXPPROC_SRC_DIR)$(@)
PSG_LN = ln -s $(PSG_SRC_DIR)$(@)
SCRIPT_LN = ln -s $(SCRIPT_SRC_DIR)$(@)
NCOMM_LN = ln -s $(NCOMM_SRC_DIR)$(@)

#---  SCCS Extraction Commands for Sources Needed.  -------
PSGSEQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)psglib/SCCS get
VNMR_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vnmr/SCCS get
XRACQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)xracq/SCCS get
EXPPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)expproc/SCCS get
PSG_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)psg/SCCS get
SCRIPT_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)scripts/SCCS get
NCOMM_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)ncomm/SCCS get

#----  default source extraction to links -------
PSGSEQ_GET= $(PSGSEQ_LN)
VNMR_GET= $(VNMR_LN)
XRACQ_GET= $(XRACQ_LN)
EXPPROC_GET= $(EXPPROC_LN)
PSG_GET= $(PSG_LN)
SCRIPT_GET= $(SCRIPT_LN)
NCOMM_GET= $(NCOMM_LN)
#------------------------------------------------------------------------
#--- VNMR sources that are needed for PSG
#------------------------------------------------------------------------
EMPTY_SRC=

VNMR_SRC=                       \
		asmfuncs.c	\
                assign.c	\
                allocate.c      \
                lockfreqfunc.c  \
                pvars.c         \
                shims.c        \
                symtab.c        \
                tools.c         \
                vfilesys.c      \
                variables1.c

VNMR_OBJ= $(VNMR_SRC:.c=.o)

#--- VNMR header files that are needed for PSG
VNMR_HDR=			\
		allocate.h	\
		asm.h		\
		data.h		\
		dpsdef.h	\
		errorcodes.h	\
		graphics.h	\
		group.h		\
		init.h		\
		params.h	\
		pvars.h		\
		shims.h		\
		symtab.h	\
		tools.h		\
		variables.h	\
		vfilesys.h	\
		wjunk.h

#------------------------------------------------------------------------
#-- common PSG sources files 
#  4/20/89  added shape_pulse.c & spcl3rdattn.c for user prog. kit (specials)
#  6/19/89  added sortfuncs.c, treefuncs.c
#  6/21/89  added hash.c
#  7/23/89  added freq_device.c, initobjects.c 
#  7/27/89  decommisioned  setPTS.c sortfuncs.c findsname.c
#------------------------------------------------------------------------
PSG_SRC=			\
                abort.c         \
                active.c        \
                ap_device.c     \
                apbit_device.c  \
		apshape_pulse.c \
		aptable.c	\
		apuserdev.c	\
                attn_device.c   \
                attr_funcs.c    \
		attr_valtype.c	\
                convert.c	\
                convertapbout.c	\
                convertipa.c	\
                crb_setup.c	\
                delay.c         \
		device.c	\
		ecc_setup.c	\
		ecc_worstCase.c	\
		event_device.c	\
                eventoverhead.c \
                formXLwords.c   \
		freq_device.c	\
		freq_list.c	\
		freqfuncs.c	\
		freqsweep.c	\
                gate.c          \
                gatedecoupler.c \
                getparm.c       \
		gradient.c	\
		hash.c		\
                hsdelay.c       \
                initHSlines.c   \
                initacqparms.c  \
                initauto.c      \
                initfreqobj.c   \
                initfunc.c      \
		initobjects.c	\
		init_u_glbl.c	\
                initval.c       \
                interlktests.c  \
		lc_hdl.c	\
		lc_index.c	\
		lk_sh.c		\
                looping.c       \
                math.c          \
                miscfuncs.c     \
                objerror.c      \
                offset.c        \
                Pbox_HT.c       \
                Pbox_psg.c      \
                phaseing.c      \
		power.c		\
                preacqdelay.c   \
		pre_exp_seq.c	\
		pre_fid_seq.c	\
		presequence.c	\
                P_receive.c     \
                pulses.c        \
                rcvrfuncs.c     \
		rfchanconst.c	\
		rfchan_device.c	\
                sendasync.c     \
                setparm.c       \
		signalhandler.c	\
		sis_misc.c	\
		sis_initpar.c	\
		sis_loop.c	\
		sis_oblique.c	\
		sis_position.c	\
		sisrfpatterns.c	\
		sli_device.c	\
		ssha.c		\
                status.c        \
                stubs.c         \
                timerwords.c    \
		treefuncs.c	\
                vtfuncs.c	\
                wetfuncs.c	\
                xmath.c

DPS_DUMMY_SRC=			\
		x_ps.c

DPS_DUMMY_OBJ= $(DPS_DUMMY_SRC:.c=.o)

PSG_OBJ= $(PSG_SRC:.c=.o)

SHORT_PSG_SRC=                  \
		hash.c          \
                P_receive.c     \
                psg4dps.c       \
		dummyfunc4dps.c \
		treefuncs.c	\
                xmath.c

SHORT_PSG_OBJ= $(SHORT_PSG_SRC:.c=.o)

SPEC_PSG_SRC= 			\
		psg4dps.c       \
                dummyfunc4dps.c

SPEC_PSG_OBJ= $(SPEC_PSG_SRC:.c=.o)

SHARED_IRIX=			\
		exp.sgi

#----- PSG header files that are needed
#  7/23/89  added freq_device.p
#------------------------------------------
PSG_HDR=			\
		abort.h		\
		acqparms.h	\
		apdelay.h	\
		aptable.h	\
		cmed.h		\
		design_flowcomp.h \
		dsp.h		\
		ecc.h		\
		fcprint.h	\
		ge3dshim.h	\
		macros.h	\
		rfconst.h	\
		chanstruct.h	\
		standard.h	\
		vnmrsys.h	\
		oopc.h		\
		objerror.h	\
		power.h		\
		prescan.h	\
		psg_utils.h	\
		common.p	\
		device.p	\
		ap_device.p	\
		apbit_device.p	\
		attn_device.p   \
		event_device.p	\
		freq_device.p	\
		REV_NUMS.h	\
		lc_index.h	\
		Pbox_HT.h	\
		Pbox_psg.h	\
		rfchan_device.p	\
		wetfuncs.h

PSG_P_HDR=			\
                common.p        \
                device.p        \
                ap_device.p     \
                apbit_device.p  \
                attn_device.p   \
                event_device.p  \
                freq_device.p   \
                REV_NUMS.h      \
                rfchan_device.p

#----- PSG source that require conditional compilation  ----
#  6/19/89  added arrayfuncs.c
#  7/27/89  decommisioned  setdirectsyn.c setoffsetsyn.c freqcorrect.c 
#	    replaced by freq_device.c
#  3/05/91  decommisioned  incpulse.c 
#------------------------------------------------------------

CND_PSG_SRC=			\
		arrayfuncs.c	\
		autofuncs.c     \
                cps.c           \
                decfuncs.c      \
                hwlooping.c     \
                initrf.c        \
                psg.c           \
		wg.c		\
                setHSlines.c


#decommisioned  setdirectsyn.c setoffsetsyn.c freqcorrect.c replaced by freq_device.c

CND_PSG_OBJ= $(CND_PSG_SRC:.c=.o)

#---------------------------------------------------------------------
#   psg source code that can be included in Users Pulse Sequences
#   i.e. C header files 
#---------------------------------------------------------------------
PSG_HDR_C=			\
		revmode.c

#----- PSG waveform generator source
#WFG_PSG_SRC=			\
#		wg.c
#
#WFG_PSG_OBJ= $(WFG_PSG_SRC:.c=.o)
#
#----- PSG source that require conditional compilation for MICRO IMAGER ---
#
#MICRO_PSG_SRC=			\
#		rfpatterns.c	
#
#----- and should include gradient.c
#
#MICRO_PSG_OBJ=$(MICRO_PSG_SRC:.c=.o)
#

#-----	SISCO source code
#		load_shims.c	
#		parse_pecc.c	
#		adcov.c
#		SLI_device.c	
# note: sis_misc.c previously was named hkdelay.c

#SIS_PSG_SRC=			\
#		freq_list.c	\
#		sis_misc.c	\
#		sis_initpar.c	\
#		sis_loop.c	\
#		sis_oblique.c	\
#		sis_position.c

#SIS_PSG_OBJ=$(SIS_PSG_SRC:.c=.o)

# -----	Other SISCO Headers
#		sli.h 		
#		tune_psg.h 	
#

#----- expproc header files that are needed
EXPPROC_HDR=			\
                expDoneCodes.h	\
		shrexpinfo.h

EXPPROC_SRC=

EXPPROC_OBJ= $(EXPPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- NCOMM Sources that are needed 
#------------------------------------------------------------------------
# Communications libraries
NCOMM_HDR=			\
		mfileObj.h

#----- xracq header files that are needed
XRACQ_HDR=			\
		ACQ_SUN.h	\
		acodes.h	\
		gradient.h	\
		lc.h

#----- PSG source files that are needed
PSGSEQ_SRC=			\
		s2pul.c

PSGSEQ_OBJ= $(PSGSEQ_SRC:.c=.o)

#----- PSG SEQUENCE header files that are needed
PSGSEQ_HDR=

#---- Vnmr Headers Needed for User Programming
USR_VNMR_HDR=			\
		asm.h		\
		data.h		\
		errorcodes.h	\
		group.h		\
		params.h	\
		pvars.h		\
		shims.h		\
		symtab.h	\
		dpsdef.h	\
		variables.h

#---- Vnmr Sources Needed for User Programming
USR_VNMR_SRC=			\
		lockfreqfunc.c

#---- PSG Sources Needed for User Programming but not used in psglib.
USR_PSG_SRC=			\
                shape_pulse.c   \
                spcl3rdattn.c

LINTLIB_SRC=			\
		lintfile.c

#---- seqgen utilities needed -------------------------
SEQGEN_MAKE=			\
		seqgenmake

SEQGEN_UTIL=			\
		xseqpreen.sh	\
		booleanpreen.sh	\
		seqgen.sh

#---- All Sources and headers required for compilation -----
ALLSRC= $(VNMR_SRC) $(VNMR_HDR) $(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C) \
	$(XRACQ_HDR) $(CND_PSG_SRC) $(DPS_DUMMY_SRC) $(EXPPROC_HDR) \
	$(EXPPROC_SRC) $(NCOMM_HDR)	\
	$(PSGSEQ_SRC) $(PSGSEQ_HDR) $(LINTLIB_SRC)	\
	$(SEQGEN_MAKE) $(SEQGEN_UTIL) $(SHARED_IRIX)

ALL_C_SRC= $(VNMR_SRC) $(PSG_SRC)  $(PSG_HDR_C)  $(CND_PSG_SRC) \
	 $(EXPPROC_SRC) $(PSGSEQ_SRC) $(LINTLIB_SRC) $(SHORT_PSG_SRC) $(DPS_DUMMY_SRC)

USERPSRC= $(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C) $(USR_PSG_SRC) $(USR_VNMR_HDR) \
	  $(XRACQ_HDR) $(CND_PSG_SRC) $(DPS_DUMMY_SRC) $(EXPPROC_HDR) \
	  $(EXPPROC_SRC) $(NCOMM_HDR) $(LINTLIB_SRC) $(USR_VNMR_SRC)  \
	    makeuserpsg

DPS_C_SRC=  $(PSG_HDR_C)  $(SHORT_PSG_SRC) $(DPS_DUMMY_SRC) \
	  $(XRACQ_HDR) $(VNMR_HDR) $(PSG_HDR)

# excludes s2pul.o

ALLOBJS= $(PSG_OBJ) $(SPEC_PSG_OBJ) $(CND_PSG_OBJ) $(DPS_DUMMY_OBJ) \
	 $(EXPPROC_OBJ) $(VNMR_OBJ)

DPS_OBJS=  $(SHORT_PSG_OBJ)  $(DPS_DUMMY_OBJ)



LINTFILES= $(ALLSRC:.c=.ln)
LIBS= -lm

#---- Targets ------------------------------------
std : $$(MAKEFILE) Source 
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib.a" \
	"TARGET_ARCH=" \
	"PARMLIB= libparam.a"  lib so_libs s2pul seqgen 
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

WINDOWS : $$(MAKEFILE) getsrc 
	rm -f s2pul.o s2pul
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= " \
	"CC= gcc " \
	"CFLAGS= -DPSG_LC -DULONG -O " \
	"CPPFLAGS= -DLINUX -D_ALL_SOURCE" \
	"TARGET_ARCH=" \
	"LDSOFLAGS= "	\
	"LDFLAGS= "	\
	"LIBS= -lm"	\
	"LIBSSTATIC= libpsglib.a libparam.a ../ncomm/libacqcomm.a "	\
	"PARMLIB= "  win_libs s2pul_win seqgen
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"


lib : Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib.a" \
	"TARGET_ARCH=" \
	"PARMLIB= libparam.a" \
	libparam.a libpsglib.a
	@echo "NMR_ID PSG lib complete -------------------------------------"

dbx : Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -g -Bstatic -DDBXTOOL -DDEBUG" \
	"TARGET_ARCH=" \
	"PSGLIB= libpsglib_dbx.a"	\
	"PARMLIB= libparam_dbx.a" \
	 s2puldbx
	@echo "NMR_ID dbx PSG complete -------------------------------------"

IRIX:   src $(SHARED_IRIX)
	$(MAKE) -e -f $(MAKEFILE)  \
	"CPPFLAGS= -DIRIX -DNO_ACQ -cckr "      \
	"LDFLAGS = -L$(sgiobjdir)/proglib/vnmr " \
	libparam_sgi.a libpsglib_sgi.a seqgen x_ps.o xseqpreen booleanpreen seqgenmake
	@echo "NMR_ID PSG Source complete ---------------------"

IRIX_PSG :
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib_sgi.a" \
	"TARGET_ARCH=-DIRIX" \
	"CFLAGS= -O -DIRIX -cckr"	\
	"CPPFLAGS= "	\
	"CND_PSG_SRC=" \
	"LINTLIB_SRC=" \
	"USR_PSG_SRC=" \
	"PARMLIB= libparam_sgi.a"  s2pul seqgen xseqpreen booleanpreen
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

SOLARIS : $$(MAKEFILE) Source 
	rm -f s2pul.o
	( SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	  "PSGLIB= libpsglib.a" \
	  "PARMLIB= libparam.a"	\
	  "CFLAGS= -O -fPIC -DPSG_LC -DULONG" \
	  "CPPFLAGS= -I$(GCC_EXEC_PREFIX)include -DSUN -DSOLARIS"	\
	  "LDSOFLAGS= -G"	\
	  "LIBS= -lacqcomm -lm -lsocket -lnsl -lrt"	\
	   lib so_libs seqgen s2pul_lib )
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"


# for debug link all  objects into recvproc
nessie : Source
	@( if [ ! -d nes ]; then	\
	   mkdir nes; 			\
	fi)
	( cd nes;			\
	$(MAKE) -e -f ../$(MAKEFILE) \
	"CC = acc -Xa -PIC "		\
	"ANSI_HDR="		\
	"CFLAGS = -g -DDBXTOOL -DDEBUG -DNESSIE"	\
	"PSGLIB= libpsglib_nes.a"	\
	"PARMLIB= libparam_nes.a" \
	 "LIBS= /vobj/sun4/proglib/ncomm/libncomm.a -lm"	\
	s2pul so_neslibs)
	@echo "NMR_ID Nessie s2pul complete -------------------------------------"


solnes : $$(MAKEFILE) Source
	@( if [ ! -d sol ]; then	\
	   mkdir sol; 			\
	fi)
	( cd sol;			\
         SOLARIS="y"; export SOLARIS;   \
	$(MAKE) -e -f ../$(MAKEFILE) \
	"ANSI_HDR="		\
	"CFLAGS= -O -fPIC -DPSG_LC -DULONG -DDEBUG -DNESSIE" \
	"CPPFLAGS= -g -DSUN -DSOLARIS"	\
	"LDSOFLAGS= -G"	\
	"LDFLAGS = -L/vobj/sol/proglib/ncomm -L/vnmr/lib" \
	"OBJDIR=$(solobjdir)"		\
	"LIBS= -lacqcomm -lm -lsocket -lnsl"	\
	"PSGLIB= libpsglib_nes.a"	\
	"PARMLIB= libparam_nes.a" \
	 s2pul so_neslibs)
	@echo "NMR_ID Solaris Nessie s2pul complete --------------------------"

#------------------------------------------------------------------------------

stdalone : 
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -g -DDBXTOOL -DDEBUG -DTESTING" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_dbx.a"	\
	"PARMLIB= libparam_dbx.a" \
	 psgdbx
	@echo Standalone  PSG complete
	@echo Do not forget to have curpar and conparplus
	@echo  in the directory prior to running psgdbx

solstdalone : $$(MAKEFILE) Source 
	rm -f s2pul.o
	( SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	  "PSGLIB= libpsglib.a" \
	  "PARMLIB= libparam.a"	\
	  "CFLAGS= -g -xF -xsb -DPSG_LC -DULONG -DDEBUG -DTESTING" \
	  "CPPFLAGS= -DSUN -DSOLARIS"	\
	  "LDSOFLAGS= -G"	\
	  "LDFLAGS = -R/vobj/sol/lib" \
	  "LIBS= /vobj/sol/lib/libacqcomm.a -lm -lsocket -lnsl"	\
	     "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 	\
	     "PSGSEQ_SRC_DIR= $(PSGSEQ_SCCS_SRC)" \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"  \
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)" \
	     "SCRIPT_SRC_DIR= $(SCRIPT_SCCS_SRC)" \
	     "VNMR_GET= $(VNMR_SGET)" "PSGSEQ_GET= $(PSGSEQ_SGET)" \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)" 	\
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"  \
	     "EXPPROC_GET= $(EXPPROC_SGET)"	\
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"  \
	     "NCOMM_GET= $(NCOMM_SGET)"	\
	     "SCRIPT_GET= $(SCRIPT_SGET)"	\
	   psgdbx )
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"


swtune :  Source
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -g -DDBXTOOL -DDEBUG -DTESTING -DSWTUNE -DSTANDALONE" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_dbx.a"	\
	"PARMLIB= libparam_dbx.a" \
	 psgtune

swtunesolaris : Source
	(SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	 "CPPFLAGS= -DSWTUNE -DSUN -DSOLARIS" \
	"CFLAGS= -O -DULONG" \
	"PSGLIB= libpsglib_tune.a"	\
	"PARMLIB= libparam_tune.a" \
	"LIBS= -lm -lsocket -lnsl"	\
	 psgtune )

swtunenessie : Source
	(SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	 "CPPFLAGS= -DSWTUNE -DSUN -DSOLARIS" \
	"CFLAGS= -O -DULONG" \
	"PSGLIB= libpsglib_tune.a"	\
	"PARMLIB= libparam_tune.a" \
	"LIBS= -lm -lsocket -lnsl"	\
	 psgtune )

prof: Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -O -pg -DPROFILE" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_p.a"	\
	"PARMLIB= libparam_p.a" \
	 s2pulprof
	@echo NMR_ID profiling PSG complete

lintlib :  lintfile.c oopc.h
	lint -a -n -z -DLINT -Cpsg lintfile.c

lintlib5 :  lintfile.c oopc.h
	lint -a -n -u -v -x -DLINT -opsg lintfile.c

depend:	$$(MAKEFILE) Source getsrc
	@ echo making dependencies...
	@ grep '^#include' $(ALL_C_SRC) $(PSG_P_HDR)\
		| sed 's/<\([^>]*\)>/"\/usr\/include\/\1"/' \
		| sed 's/:[^"]*"\([^"]*\)".*/: \1/' \
		| sed 's/\.c/.o/' \
                | sed 's/\.y/.o/' \
                | sed 's/\.l/.o/' >makedepd
	@ ls -1 $(ALL_C_SRC) | awk "{ {len = length(\$$0)} {s2 = substr(\$$0, 1, len - 2)} {print s2 \".o: \", \$$0 >> \"makedepd\"} } "
	@ awk "{ if ( \$$2 !~ /\/usr\// ) { print \$$0; } }" makedepd | sort > makedep2
	@ awk 'BEGIN { prev_field_1 = "" } 				\
	             { if ( $$1 != prev_field_1 ) printf( "\n" );	\
		       prev_field_1 = $$1; print }'			\
		<makedep2 >makedep
	@ echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	@ echo '$$r makedep' >>eddep
	@ echo 'w' >>eddep
	@ cp $(MAKEFILE) $(MAKEFILE).bak
	@ ed - $(MAKEFILE) < eddep
	@ rm -f eddep makedep makedep2 makedepd
	@ echo '# DEPENDENCIES MUST END AT END OF FILE' >> $(MAKEFILE)
	@ echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> $(MAKEFILE)
	@ echo '# see make depend above' >> $(MAKEFILE)

#-----  Recursive Targets ----------------------------------------------------
s2pul s2puldbx s2pulprof:  $(PARMLIB) $(PSGLIB) $(PSGSEQ_OBJ) $(DPS_DUMMY_OBJ)
	(umask 2; $(LINK.c) -o $@ -L$(SOLOBJDIR)/proglib/ncomm $(PSGSEQ_OBJ) $(DPS_DUMMY_OBJ) $(PSGLIB) $(PARMLIB) $(LIBS) )

s2pul_win: $(DPS_DUMMY_OBJ) $(PSGSEQ_OBJ)
#	(umask 2; $(CC) -o s2pul $(LDFLAGS) $(DPS_DUMMY_OBJ) $(PSGSEQ_OBJ) $(LIBS) )
	(umask 2; $(CC) -o s2pul $(LDFLAGS) $(DPS_DUMMY_OBJ) $(PSGSEQ_OBJ) $(LIBSSTATIC) $(LIBS))

s2pul_lib:  $(PSGSEQ_OBJ) $(DPS_DUMMY_OBJ)
	(umask 2; $(LINK.c) -o s2pul -L$(SOLOBJDIR)/proglib/ncomm -R/vnmr/lib $(PSGSEQ_OBJ) $(DPS_DUMMY_OBJ) $(PSGLIB) $(PARMLIB) $(LIBS) )

#-----  standalone version of psg, requires a curpar and conparplus parameter files
#----   conparplus = "cat conpar global > conparplus"
psgdbx: $(PSGSEQ_OBJ) $(PSG_OBJ) $(CND_PSG_OBJ) $(VNMR_OBJ) $(DPS_DUMMY_OBJ)
	(umask 2; $(LINK.c) -o $@ $(PSGSEQ_OBJ) $(PSG_OBJ) $(CND_PSG_OBJ) $(DPS_DUMMY_OBJ) $(VNMR_OBJ) $(LIBS)  )

psgtune: $(PARMLIB) $(PSGLIB) $(DPS_DUMMY_OBJ)
	echo PARMLIB = $(PARMLIB)

Source :
	( cd $(SRC_DIR); $(MAKE) -e -f $(MAKEFILE) \
	     "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 	\
	     "PSGSEQ_SRC_DIR= $(PSGSEQ_SCCS_SRC)" \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"  \
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)" \
	     "SCRIPT_SRC_DIR= $(SCRIPT_SCCS_SRC)" \
	     "VNMR_GET= $(VNMR_SGET)" "PSGSEQ_GET= $(PSGSEQ_SGET)" \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)" 	\
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"  \
	     "EXPPROC_GET= $(EXPPROC_SGET)"	\
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"  \
	     "NCOMM_GET= $(NCOMM_SGET)"	\
	     "SCRIPT_GET= $(SCRIPT_SGET)" src)

src : $$(MAKEFILE) $(ALLSRC)
	@echo Sources up to date...

getsrc :
	( $(MAKE) -e -f $(MAKEFILE) \
		"EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"     \
		"EXPPROC_GET= $(EXPPROC_SGET)"             \
		"NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"         \
		"NCOMM_GET= $(NCOMM_SGET)"                 \
		"PROCPROC_SRC_DIR= $(PROCPROC_SCCS_SRC)"   \
		"PROCPROC_GET= $(PROCPROC_SGET)"           \
		"RECVPROC_SRC_DIR= $(RECVPROC_SCCS_SRC)"   \
		"RECVPROC_GET= $(RECVPROC_SGET)"           \
		"ROBOPROC_SRC_DIR= $(ROBOPROC_SCCS_SRC)"   \
		"ROBOPROC_GET= $(ROBOPROC_SGET)"           \
		"SENDPROC_SRC_DIR= $(SENDPROC_SCCS_SRC)"   \
		"SENDPROC_GET= $(SENDPROC_SGET)"           \
		"VNMR_SRC_DIR= $(VNMR_SCCS_SRC)"           \
		"VNMR_GET= $(VNMR_SGET)"                   \
		"ACQPROC_SRC_DIR= $(ACQPROC_SCCS_SRC)"     \
		"ACQPROC_GET= $(ACQPROC_SGET)"             \
		"PSG_SRC_DIR= $(PSG_SCCS_SRC)"     \
		"PSG_GET= $(PSG_SGET)"             \
		"VWACQ_SRC_DIR= $(VWACQ_SCCS_SRC)"         \
		"VWACQ_GET= $(VWACQ_SGET)" src )

userp :
	( $(MAKE) -e -f $(sourcedir)/syspsg/$(MAKEFILE) \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"  \
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)" \
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"  \
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"  \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)" 	\
	     "EXPPROC_GET= $(EXPPROC_SGET)"	\
	     "NCOMM_GET= $(NCOMM_SGET)"	\
             "VNMR_GET= $(VNMR_SGET)" \
	     userpsrc)

userpsrc : $(USERPSRC)
	@echo Sources up to date...

Dps_Source :
	( cd $(SRC_DIR); $(MAKE) -e -f $(MAKEFILE) \
	     "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 	\
	     "PSGSEQ_SRC_DIR= $(PSGSEQ_SCCS_SRC)" \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"  \
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)" \
	     "SCRIPT_SRC_DIR= $(SCRIPT_SCCS_SRC)" \
	     "VNMR_GET= $(VNMR_SGET)" "PSGSEQ_GET= $(PSGSEQ_SGET)" \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)" 	\
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"  \
	     "EXPPROC_GET= $(EXPPROC_SGET)"	\
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"  \
	     "NCOMM_GET= $(NCOMM_SGET)"	\
	     "SCRIPT_GET= $(SCRIPT_SGET)" Dps_src)

Dps_src : $$(MAKEFILE) $(DPS_C_SRC)
	@echo Sources up to date...

#libparam.a libparam_p.a libparam_dbx.a : getobjp $(VNMR_OBJ)
libparam.a libparam_p.a libparam_dbx.a libparam_tune.a : getobjp $(VNMR_OBJ)
	- (umask 2; rm -f $@)
	@(umask 2; ar rv $@ `lorder $(VNMR_OBJ) | tsort 2>/dev/null`  1>/dev/null)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		 echo ranlib $@; 			\
		 ranlib $@; 				\
	  fi)
	-@ (umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo remove objects;			\
		rm -f $(VNMR_OBJ);			\
	    fi)

libparam_sgi.a : getsgiparam $(VNMR_OBJ) 
	- (umask 2; rm -f libparam.a libparam.so)
	@(umask 2; ar rsv libparam.a  $(VNMR_OBJ))
	ld -n32 -shared  $(VNMR_OBJ) -o libparam.so
	@echo libparam.a is done 

libparam.so : libparam.a
	- (umask 2; rm -f $@.*)
	@(umask 2; ld $(LDSOFLAGS) -o $@.$(SHAREDLIB_VER) $(VNMR_OBJ);)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
			rm -f $(VNMR_OBJ);				\
		  else							\
			ln -s $@.$(SHAREDLIB_VER) $@;			\
		  fi)

libpsglib.so : libpsglib.a
	- (umask 2; rm -f $@.*)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ld $(LDSOFLAGS) -o $@.$(SHAREDLIB_VER)			\
			$(PSG_OBJ) $(CND_PSG_OBJ);			\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ);			\
	else								\
		ld $(LDSOFLAGS) -o $@.$(SHAREDLIB_VER)			\
			$(PSG_OBJ) $(CND_PSG_OBJ);			\
		ln -s $@.$(SHAREDLIB_VER) $@;				\
	fi)

libpsglib.a libpsglib_p.a libpsglib_dbx.a libpsglib_tune.a : getobj $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f $@)
	@(umask 2; ar rv $@ `lorder $(PSG_OBJ) $(CND_PSG_OBJ) \
			          | tsort 2>/dev/null` 1>/dev/null)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo ranlib $@;				\
		ranlib $@;				\
	  fi)
	-@ (umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo remove objects;			\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ);	\
	    fi)

libpsglib_sgi.a : getsgipsg $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f libpsglib.a libpsglib.so)
	@(umask 2; ar rsv libpsglib.a  $(PSG_OBJ) $(CND_PSG_OBJ) )
	ld -n32 -shared -exports_file $(SHARED_IRIX) $(PSG_OBJ) $(CND_PSG_OBJ) -o libpsglib.so
	rm -f $(VNMR_OBJ)
	rm -f $(PSG_OBJ)
	rm -f $(CND_PSG_OBJ)

so_libs :
	- (umask 2; rm -f libparam.s*)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ar x libparam.a $(VNMR_OBJ);				\
		ld $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER)		\
			$(VNMR_OBJ);					\
		rm -f $(VNMR_OBJ);					\
	else								\
		ld $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER)		\
			$(VNMR_OBJ);					\
		rm -f libparam.so;					\
		ln -s libparam.so.$(SHAREDLIB_VER) libparam.so;		\
	fi)

	- (umask 2; rm -f libpsglib.s*)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ar x libpsglib.a					\
			$(PSG_OBJ) $(CND_PSG_OBJ);			\
		ld $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)	\
			$(PSG_OBJ) $(CND_PSG_OBJ);			\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ);			\
	else								\
		ld $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)	\
			$(PSG_OBJ) $(CND_PSG_OBJ);			\
		rm -f libpsglib.so;					\
		ln -s libpsglib.so.$(SHAREDLIB_VER) libpsglib.so;	\
	fi)

win_libs : $(VNMR_OBJ) $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f libparam*)
	- (umask 2; rm -f libpsglib*)
	@(umask 2; ar rv libparam.a $(VNMR_OBJ)  1>/dev/null)
	@(umask 2; ar rv libpsglib.a $(PSG_OBJ) $(CND_PSG_OBJ)  1>/dev/null)
#	@(umask 2; 			\
#	gcc $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)	\
#		$(PSG_OBJ) $(CND_PSG_OBJ);			\
#	ln -s libpsglib.so.$(SHAREDLIB_VER) libpsglib.so;	\
#	gcc $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER)	\
#		$(VNMR_OBJ);					\
#	ln -s libparam.so.$(SHAREDLIB_VER) libparam.so;	)

libparam_nes.a : $(VNMR_OBJ)
	- (umask 2; rm -f $@)
	@(umask 2; ar rv $@ `lorder $(VNMR_OBJ) | tsort 2>/dev/null`  1>/dev/null)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		 echo ranlib $@; 			\
		 ranlib $@; 				\
	  fi)


libpsglib_nes.a : $(PSG_OBJ) $(CND_PSG_OBJ) $(EXPPROC_OBJ)
	- (umask 2; rm -f $@)
	@(umask 2; ar rv $@ `lorder $(PSG_OBJ) $(CND_PSG_OBJ) $(EXPPROC_OBJ) \
			          | tsort 2>/dev/null` 1>/dev/null)
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo ranlib $@;				\
		ranlib $@;				\
	  fi)

so_neslibs :
	- (umask 2; rm libparam.so.*)
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ld $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER)		\
			$(VNMR_OBJ);					\
	else								\
		ld $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER)		\
			$(VNMR_OBJ);					\
		rm -f libparam.so;					\
		ln -s libparam.so.$(SHAREDLIB_VER) libparam.so;		\
	fi)

	- (umask 2; rm libpsglib.so.*)
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ld $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)	\
			$(PSG_OBJ) $(CND_PSG_OBJ) $(EXPPROC_OBJ);			\
	else								\
		ld $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)	\
			$(PSG_OBJ) $(CND_PSG_OBJ) $(EXPPROC_OBJ);	\
		rm -f libpsglib.so;					\
		ln -s libpsglib.so.$(SHAREDLIB_VER) libpsglib.so;	\
	fi)


getobj :
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		echo extract lib objects from library $(PSGLIB);	\
		ar xo $(PSGLIB) $(PSG_OBJ) $(CND_PSG_OBJ);		\
	 fi)

getobjp :
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		echo extract lib objects from library $(PARMLIB);	\
		ar xo $(PARMLIB) $(VNMR_OBJ);				\
	 fi)

getobjv :
	@echo extract lib objects from library $(PSGLIB)
	-@ (umask 2; ar xo $(PSGLIB) $(PSG_OBJ) $(CND_PSG_OBJ) )

getsgipsg :
	-@if [ -f libpsglib.a ]; then    \
	  echo extract lib objects from library libpsglib.a;  \
	  ar xo libpsglib.a $(PSG_OBJ) $(CND_PSG_OBJ);          \
	else echo library libpsglib.a does not exist;  \
	fi

getsgiparam:
	-@if [ -f libparam.a ]; then     \
	  echo extract lib objects from library libparam.a;  \
	  ar xo libparam.a $(VNMR_OBJ);                 \
	else echo library libparam.a does not exist;  \
	fi

LINTFILES= $(VNMR_SRC) $(CND_PSG_SRC) $(PSG_SRC)
lint: $(LINTFILES)
	$(LINK.c) $(LINTFILES)

fromlibs: $(OBJ) $(OBJS)
	(umask 2; $(LINK.c) -o $(ProgName) $(OBJ) $(OBJS) \
	   $(LINKLIB1) $(LINKLIB2) $(MISCLIBS) $(LIBS) )
#       (umask 2;$(LINK.c) -Qoption ld -M -o $(ProgName) $(OBJ) $(OBJS) \
#           $(LINKLIB1) $(LINKLIB2) $(MISCLIBS) $(LIBS)

#--- Object dependencies -------------------------------------------

$(ALLOBJS) : $(@:.o=.c)
	(umask 2; $(COMPILE.c) -DPSG_LC $(@:.o=.c) )

$(PSGSEQ_OBJ) : $(@:.o=.c)
	(umask 2; $(COMPILE.c) -I. $(@:.o=.c) )

#------ makefile extraction via SCCS allways. -------
$(MAKEFILE) : 
	$(PSG_SGET) $@

#------------  Source Extraction via SCCS or Links ---------------

$(VNMR_SRC) $(VNMR_HDR) : $$(VNMR_SRC_DIR)$$(@)
	$(VNMR_GET) $@

$(PSGSEQ_SRC) $(PSGSEQ_HDR) : $$(PSGSEQ_SRC_DIR)$$(@)
	$(PSGSEQ_GET) $@

$(EXPPROC_SRC) $(EXPPROC_HDR) : $$(EXPPROC_SRC_DIR)$$(@)
	$(EXPPROC_GET) $@

# $(NCOMM_SRC_LIB) $(NCOMM_HDR_LIB) : $$(NCOMM_SRC_DIR)$$(@)
#	$(NCOMM_GET) $@

$(NCOMM_HDR) : $$(NCOMM_SRC_DIR)$$(@)
	$(NCOMM_GET) $@

$(XRACQ_HDR) : $$(XRACQ_SRC_DIR)$$(@)
	$(XRACQ_GET) $@

$(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C) $(DPS_DUMMY_SRC) $(SPEC_PSG_SRC) \
$(USR_PSG_SRC) makeuserpsg $(CND_PSG_SRC) $(LINTLIB_SRC) $(WFG_PSG_SRC) \
$(SEQGEN_MAKE): $$(PSG_SRC_DIR)$$(@)
	$(PSG_GET) $@

$(SEQGEN_UTIL) : $$(SCRIPT_SRC_DIR)$$(@)
	$(SCRIPT_GET) $@

$(SHARED_IRIX) : $$(PSG_SRC_DIR)$$(@)
	$(PSG_GET) $@

# s2pul uses <standard.h> which is screened out by depend script thus s2pul.o
# dependences are hardwired here..

s2pul.o: standard.h
s2pul.o: oopc.h
s2pul.o: acqparms.h
s2pul.o: rfconst.h
s2pul.o: aptable.h
s2pul.o: power.h
s2pul.o: macros.h
s2pul.o: apdelay.h
s2pul.o: wetfuncs.h

# DO NOT DELETE THIS LINE -- make depend uses it
# DEPENDENCIES MUST END AT END OF FILE

P_receive.o:  P_receive.c
P_receive.o:  P_receive.c
P_receive.o: group.h
P_receive.o: group.h
P_receive.o: symtab.h
P_receive.o: symtab.h
P_receive.o: variables.h
P_receive.o: variables.h

abort.o:  abort.c
abort.o: group.h

active.o:  active.c
active.o: group.h
active.o: variables.h

allocate.o:  allocate.c
allocate.o: allocate.h

ap_device.o:  ap_device.c
ap_device.o: acodes.h
ap_device.o: ap_device.p
ap_device.o: oopc.h
ap_device.o: abort.h

ap_device.p: device.p

apbit_device.o:  apbit_device.c
apbit_device.o: apbit_device.p
apbit_device.o: oopc.h

apbit_device.p: ap_device.p

apshape_pulse.o:  apshape_pulse.c
apshape_pulse.o: acodes.h
apshape_pulse.o: acqparms.h
apshape_pulse.o: apdelay.h
apshape_pulse.o: aptable.h
apshape_pulse.o: macros.h
apshape_pulse.o: oopc.h
apshape_pulse.o: rfconst.h
apshape_pulse.o: vfilesys.h

aptable.o:  aptable.c
aptable.o: acodes.h
aptable.o: acqparms.h
aptable.o: aptable.h
aptable.o: group.h
aptable.o: symtab.h
aptable.o: variables.h
aptable.o: vfilesys.h

apuserdev.o:  apuserdev.c
apuserdev.o: acodes.h
apuserdev.o: acqparms.h
apuserdev.o: macros.h
apuserdev.o: oopc.h

arrayfuncs.o:  arrayfuncs.c
arrayfuncs.o: acqparms.h
arrayfuncs.o: group.h
arrayfuncs.o: oopc.h
arrayfuncs.o: rfconst.h
arrayfuncs.o: shims.h
arrayfuncs.o: variables.h

asmfuncs.o:  asmfuncs.c
asmfuncs.o: asm.h

assign.o:  assign.c
assign.o: group.h
assign.o: params.h
assign.o: variables.h

attn_device.o:  attn_device.c
attn_device.o: acodes.h
attn_device.o: acqparms.h
attn_device.o: attn_device.p
attn_device.o: oopc.h

attn_device.p: ap_device.p

attr_funcs.o:  attr_funcs.c
attr_funcs.o: acodes.h
attr_funcs.o: acqparms.h
attr_funcs.o: oopc.h
attr_funcs.o: rfconst.h

attr_valtype.o:  attr_valtype.c
attr_valtype.o: oopc.h

autofuncs.o:  autofuncs.c
autofuncs.o: acodes.h
autofuncs.o: acqparms.h
autofuncs.o: group.h
autofuncs.o: macros.h
autofuncs.o: rfconst.h
autofuncs.o: shims.h

convert.o:  convert.c
convert.o: REV_NUMS.h
convert.o: acodes.h
convert.o: acqparms.h
convert.o: aptable.h
convert.o: dsp.h
convert.o: expDoneCodes.h
convert.o: group.h
convert.o: lc_index.h

convertapbout.o:  convertapbout.c

convertipa.o:  convertipa.c
convertipa.o: acodes.h
convertipa.o: acqparms.h

cps.o:  cps.c
cps.o: acodes.h
cps.o: acqparms.h
cps.o: apdelay.h
cps.o: aptable.h
cps.o: dsp.h
cps.o: group.h
cps.o: macros.h
cps.o: oopc.h
cps.o: rfconst.h
cps.o: symtab.h
cps.o: variables.h

decfuncs.o:  decfuncs.c
decfuncs.o: acodes.h
decfuncs.o: acqparms.h
decfuncs.o: group.h
decfuncs.o: oopc.h
decfuncs.o: rfconst.h

crb_setup.o:  crb_setup.c
crb_setup.o: vnmrsys.h
crb_setup.o: acodes.h
crb_setup.o: acqparms.h
crb_setup.o: group.h
crb_setup.o: macros.h

delay.o:  delay.c
delay.o: acodes.h
delay.o: acqparms.h
delay.o: macros.h
delay.o: oopc.h
delay.o: rfconst.h

device.o:  device.c
device.o: device.p
device.o: oopc.h

device.p: common.p

ecc_setup.o:  ecc_setup.c
ecc_setup.o: acodes.h
ecc_setup.o: group.h
ecc_setup.o: vnmrsys.h
ecc_setup.o: ecc.h

event_device.o:  event_device.c
event_device.o: acodes.h
event_device.o: ecc.h
event_device.o: event_device.p
event_device.o: oopc.h
event_device.o: rfconst.h

ecc_worstCase.o: ecc_worstCase.c
ecc_worstCase.o: vnmrsys.h
ecc_worstCase.o: group.h
ecc_worstCase.o: ecc.h

event_device.p: device.p

eventoverhead.o:  eventoverhead.c
eventoverhead.o: apdelay.h

formXLwords.o:  formXLwords.c
formXLwords.o: acqparms.h
formXLwords.o: rfconst.h

freq_device.o:  freq_device.c
freq_device.o: acodes.h
freq_device.o: freq_device.p
freq_device.o: oopc.h
freq_device.o: rfconst.h


freq_device.p: ap_device.p

freq_list.o:  freq_list.c
freq_list.o: ACQ_SUN.h
freq_list.o: acodes.h
freq_list.o: acqparms.h
freq_list.o: aptable.h
freq_list.o: group.h
freq_list.o: macros.h
freq_list.o: oopc.h
freq_list.o: rfconst.h
freq_list.o: vnmrsys.h

freqfuncs.o:  freqfuncs.c
freqfuncs.o: group.h
freqfuncs.o: params.h
freqfuncs.o: variables.h

freqsweep.o:  freqsweep.c
freqsweep.o: acodes.h
freqsweep.o: acqparms.h
freqsweep.o: macros.h
freqsweep.o: oopc.h
freqsweep.o: rfconst.h

gate.o:  gate.c
gate.o: acodes.h

gatedecoupler.o:  gatedecoupler.c
gatedecoupler.o: acodes.h
gatedecoupler.o: acqparms.h
gatedecoupler.o: apdelay.h
gatedecoupler.o: macros.h
gatedecoupler.o: oopc.h
gatedecoupler.o: rfconst.h

getparm.o:  getparm.c

gradient.o:  gradient.c
gradient.o: ACQ_SUN.h
gradient.o: acodes.h
gradient.o: acqparms.h
gradient.o: apdelay.h
gradient.o: aptable.h
gradient.o: gradient.h
gradient.o: group.h
gradient.o: macros.h
gradient.o: rfconst.h

hash.o:  hash.c
hash.o:  hash.c

hsdelay.o:  hsdelay.c
hsdelay.o: acodes.h
hsdelay.o: apdelay.h
hsdelay.o: macros.h
hsdelay.o: rfconst.h

hwlooping.o:  hwlooping.c
hwlooping.o: acodes.h
hwlooping.o: acqparms.h
hwlooping.o: apdelay.h
hwlooping.o: dsp.h
hwlooping.o: group.h
hwlooping.o: macros.h
hwlooping.o: oopc.h
hwlooping.o: rfconst.h
hwlooping.o: shrexpinfo.h

initHSlines.o:  initHSlines.c
initHSlines.o: acodes.h
initHSlines.o: acqparms.h
initHSlines.o: group.h
initHSlines.o: rfconst.h

init_u_glbl.o:  init_u_glbl.c
init_u_glbl.o: acqparms.h
init_u_glbl.o: oopc.h

initacqparms.o:  initacqparms.c
initacqparms.o: acodes.h
initacqparms.o: acqparms.h
initacqparms.o: data.h
initacqparms.o: dsp.h
initacqparms.o: group.h
initacqparms.o: lc.h
initacqparms.o: mfileObj.h
initacqparms.o: rfconst.h
initacqparms.o: shrexpinfo.h
initacqparms.o: variables.h

initauto.o:  initauto.c
initauto.o: acodes.h
initauto.o: acqparms.h
initauto.o: group.h
initauto.o: rfconst.h
initauto.o: shims.h

initfreqobj.o:  initfreqobj.c
initfreqobj.o: acodes.h
initfreqobj.o: acqparms.h
initfreqobj.o: chanstruct.h
initfreqobj.o: group.h
initfreqobj.o: oopc.h
initfreqobj.o: params.h
initfreqobj.o: rfconst.h
initfreqobj.o: variables.h

initfunc.o:  initfunc.c
initfunc.o: acodes.h
initfunc.o: acqparms.h
initfunc.o: group.h
initfunc.o: oopc.h
initfunc.o: rfconst.h

initobjects.o:  initobjects.c
initobjects.o: acodes.h
initobjects.o: acqparms.h
initobjects.o: chanstruct.h
initobjects.o: group.h
initobjects.o: oopc.h
initobjects.o: params.h
initobjects.o: rfconst.h
initobjects.o: variables.h

initrf.o:  initrf.c
initrf.o: acodes.h
initrf.o: acqparms.h
initrf.o: apdelay.h
initrf.o: chanstruct.h
initrf.o: group.h
initrf.o: macros.h
initrf.o: oopc.h
initrf.o: rfconst.h

initval.o:  initval.c
initval.o: acqparms.h

interlktests.o:  interlktests.c
interlktests.o: acodes.h
interlktests.o: acqparms.h
interlktests.o: expDoneCodes.h
interlktests.o: group.h
interlktests.o: rfconst.h

lc_hdl.o:  lc_hdl.c
lc_hdl.o: acodes.h
lc_hdl.o: lc.h
lc_hdl.o: lc_index.h

lc_index.o:  lc_index.c
lc_index.o: lc_index.h

lintfile.o:  lintfile.c
lintfile.o: oopc.h

lk_sh.o:  lk_sh.c
lk_sh.o: acodes.h
lk_sh.o: acqparms.h

lockfreqfunc.o:  lockfreqfunc.c
lockfreqfunc.o: group.h
lockfreqfunc.o: vnmrsys.h

looping.o:  looping.c
looping.o: acodes.h
looping.o: acqparms.h
looping.o: rfconst.h

math.o:  math.c
math.o: acodes.h
math.o: acqparms.h
math.o: rfconst.h

miscfuncs.o:  miscfuncs.c
miscfuncs.o: acodes.h
miscfuncs.o: acqparms.h
miscfuncs.o: group.h
miscfuncs.o: oopc.h
miscfuncs.o: rfconst.h

objerror.o:  objerror.c
objerror.o: objerror.h
objerror.o: oopc.h

offset.o:  offset.c
offset.o: acodes.h
offset.o: acqparms.h
offset.o: group.h
offset.o: macros.h
offset.o: oopc.h
offset.o: rfconst.h

Pbox_HT.o:  Pbox_HT.c
Pbox_HT.o: group.h
Pbox_HT.o: variables.h
Pbox_HT.o: rfconst.h
Pbox_HT.o: acqparms.h
Pbox_HT.o: aptable.h
Pbox_HT.o: Pbox_psg.h
Pbox_HT.o: Pbox_HT.h

Pbox_psg.o:  Pbox_psg.c
Pbox_psg.o: oopc.h
Pbox_psg.o: group.h
Pbox_psg.o: rfconst.h
Pbox_psg.o: acqparms.h
Pbox_psg.o: aptable.h
Pbox_psg.o: apdelay.h
Pbox_psg.o: macros.h
Pbox_psg.o: Pbox_psg.h
Pbox_psg.o: vfilesys.h

phaseing.o:  phaseing.c
phaseing.o: acodes.h
phaseing.o: acqparms.h
phaseing.o: aptable.h
phaseing.o: macros.h
phaseing.o: oopc.h
phaseing.o: rfconst.h

power.o:  power.c
power.o: ACQ_SUN.h
power.o: acodes.h
power.o: acqparms.h
power.o: group.h
power.o: macros.h
power.o: power.h
power.o: rfconst.h

pre_exp_seq.o:  pre_exp_seq.c
pre_exp_seq.o: acqparms.h
pre_exp_seq.o: oopc.h

pre_fid_seq.o:  pre_fid_seq.c
pre_fid_seq.o: acqparms.h
pre_fid_seq.o: oopc.h

preacqdelay.o:  preacqdelay.c
preacqdelay.o: acodes.h
preacqdelay.o: acqparms.h
preacqdelay.o: group.h
preacqdelay.o: macros.h
preacqdelay.o: rfconst.h

presequence.o:  presequence.c
presequence.o: acqparms.h
presequence.o: oopc.h

psg.o:  psg.c
psg.o: ACQ_SUN.h
psg.o: REV_NUMS.h
psg.o: abort.h
psg.o: apdelay.h
psg.o: asm.h
psg.o: group.h
psg.o: oopc.h
psg.o: params.h
psg.o: pvars.h
psg.o: rfconst.h
psg.o: symtab.h
psg.o: variables.h
psg.o: vfilesys.h

pulses.o:  pulses.c
pulses.o: acodes.h
pulses.o: acqparms.h
pulses.o: aptable.h
pulses.o: group.h
pulses.o: lc.h
pulses.o: macros.h
pulses.o: oopc.h
pulses.o: rfconst.h

pvars.o:  pvars.c
pvars.o: group.h
pvars.o: params.h
pvars.o: symtab.h
pvars.o: variables.h
pvars.o: vnmrsys.h
pvars.o: wjunk.h

rcvrfuncs.o:  rcvrfuncs.c
rcvrfuncs.o: acqparms.h
rcvrfuncs.o: oopc.h
rcvrfuncs.o: rfconst.h

revmode.o:  revmode.c

rfchan_device.o:  rfchan_device.c
rfchan_device.o: acodes.h
rfchan_device.o: acqparms.h
rfchan_device.o: aptable.h
rfchan_device.o: freq_device.p
rfchan_device.o: macros.h
rfchan_device.o: oopc.h
rfchan_device.o: rfchan_device.p
rfchan_device.o: rfconst.h

rfchan_device.p: device.p

rfchanconst.o:  rfchanconst.c
rfchanconst.o: acqparms.h
rfchanconst.o: chanstruct.h
rfchanconst.o: oopc.h
rfchanconst.o: rfconst.h

s2pul.o:  s2pul.c

sendasync.o:  sendasync.c

setHSlines.o:  setHSlines.c
setHSlines.o: acodes.h
setHSlines.o: acqparms.h
setHSlines.o: rfconst.h

setparm.o:  setparm.c

shims.o:  shims.c
shims.o: group.h

signalhandler.o:  signalhandler.c

sis_initpar.o:  sis_initpar.c
sis_initpar.o: acqparms.h
sis_initpar.o: group.h
sis_initpar.o: macros.h
sis_initpar.o: oopc.h
sis_initpar.o: rfconst.h
sis_initpar.o: variables.h
sis_initpar.o: vnmrsys.h

sis_loop.o:  sis_loop.c
sis_loop.o: acodes.h
sis_loop.o: acqparms.h
sis_loop.o: lc.h
sis_loop.o: macros.h
sis_loop.o: oopc.h
sis_loop.o: rfconst.h

sis_misc.o:  sis_misc.c
sis_misc.o: acodes.h
sis_misc.o: acqparms.h
sis_misc.o: macros.h
sis_misc.o: rfconst.h

sis_oblique.o:  sis_oblique.c
sis_oblique.o: acqparms.h
sis_oblique.o: macros.h
sis_oblique.o: oopc.h
sis_oblique.o: rfconst.h
sis_oblique.o: vnmrsys.h

sis_position.o:  sis_position.c
sis_position.o: acqparms.h
sis_position.o: macros.h
sis_position.o: oopc.h
sis_position.o: rfconst.h

sisrfpatterns.o:  sisrfpatterns.c
sisrfpatterns.o: acodes.h
sisrfpatterns.o: acqparms.h
sisrfpatterns.o: group.h
sisrfpatterns.o: macros.h
sisrfpatterns.o: oopc.h
sisrfpatterns.o: rfconst.h
sisrfpatterns.o: vnmrsys.h

sli_device.o:  sli_device.c
sli_device.o: ACQ_SUN.h
sli_device.o: acodes.h
sli_device.o: acqparms.h
sli_device.o: macros.h

ssha.o: ssha.c
ssha.o: acodes.h
ssha.o: group.h

status.o:  status.c
status.o: acqparms.h
status.o: group.h
status.o: rfconst.h

stubs.o:  stubs.c

symtab.o:  symtab.c
symtab.o: symtab.h

timerwords.o:  timerwords.c

tools.o:  tools.c
tools.o: tools.h
tools.o: vnmrsys.h

treefuncs.o:  treefuncs.c
treefuncs.o:  treefuncs.c
treefuncs.o: group.h
treefuncs.o: group.h
treefuncs.o: params.h
treefuncs.o: params.h
treefuncs.o: symtab.h
treefuncs.o: symtab.h
treefuncs.o: variables.h
treefuncs.o: variables.h

variables1.o:  variables1.c
variables1.o: graphics.h
variables1.o: group.h
variables1.o: init.h
variables1.o: params.h
variables1.o: symtab.h
variables1.o: variables.h

vtfuncs.o:  vtfuncs.c
vtfuncs.o: acodes.h
vtfuncs.o: acqparms.h
vtfuncs.o: expDoneCodes.h
vtfuncs.o: group.h
vtfuncs.o: rfconst.h

wetfuncs.o: wetfuncs.c
wetfuncs.o: oopc.h
wetfuncs.o: acqparms.h
wetfuncs.o: rfconst.h
wetfuncs.o: macros.h

wg.o:  wg.c
wg.o: acodes.h
wg.o: acqparms.h
wg.o: apdelay.h
wg.o: aptable.h
wg.o: group.h
wg.o: macros.h
wg.o: oopc.h
wg.o: rfconst.h
wg.o: vnmrsys.h

x_ps.o:  x_ps.c

xmath.o:  xmath.c
xmath.o:  xmath.c
xmath.o: REV_NUMS.h
xmath.o: REV_NUMS.h
xmath.o: acqparms.h
xmath.o: acqparms.h
xmath.o: apdelay.h
xmath.o: apdelay.h
xmath.o: aptable.h
xmath.o: aptable.h
xmath.o: dpsdef.h
xmath.o: dpsdef.h
xmath.o: group.h
xmath.o: group.h
xmath.o: lc.h
xmath.o: lc.h
xmath.o: variables.h
xmath.o: variables.h
# DEPENDENCIES MUST END AT END OF FILE
# IF YOU PUT STUFF HERE IT WILL GO AWAY
# see make depend above
