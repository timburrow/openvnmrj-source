;
;
; Varian, Inc. All Rights Reserved.
; This software contains proprietary and confidential
; information of Varian, Inc. and its contributors.
; Use, disclosure and reproduction is prohibited without
; prior consent.
;
;


; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
AppName=VnmrJ
AppVerName={code:GetVersion}
AppId={code:GetVersion}
AppPublisher=Varian Inc.
AppPublisherURL=http://www.varianinc.com
AppSupportURL=http://www.varianinc.com
AppUpdatesURL=http://www.varianinc.com
;DefaultDirName={%SFUDIR|C:\SFU}\vnmra
DefaultDirName={code:getDestDir}
DefaultGroupName=VnmrJ
OutputDir=E:\nv_vj02.22
OutputBaseFilename=installvnmrj
PrivilegesRequired=admin
Compression=lzma
SolidCompression=true
;windowVisible=yes
WizardImageFile=N:\windows\vj_logo.bmp
ShowLanguageDialog=yes
;AlwaysRestart=true
ChangesEnvironment=true
UsePreviousAppDir=true
;Uninstallable=yes
;UninstallDisplayName=VnmrJ2.1C

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Components: VNMR
;Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked; Components: VNMR
Name: quicklaunchicon; Description: Create a &Quick Launch icon; Components: VNMR

[Files]

Source: {src}\*; DestDir: {app}; Flags: nocompression external dontcopy; Tasks: ; Components: VNMR

[Icons]
;Name: {group}\VnmrJ; Filename: {app}\bin\vnmrj.exe
;Name: {userdesktop}\VnmrJ; Filename: {app}\bin\vnmrj.exe; Tasks: desktopicon
;Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\VnmrJ; Filename: {app}\bin\vnmrj.exe; Tasks: quicklaunchicon
;Name: {userprograms}\{groupname}\VnmrJ Adm; Filename: {app}\bin\vnmrj_adm.exe; IconIndex: 0
;Name: {group}\VnmrJ Debug; Filename: {app}\bin\vnmrj_debug.exe; IconIndex: 0
Name: {group}\VnmrJ; Filename: {app}\bin\vnmrj.exe; Components: VNMR; Tasks: 
Name: {commondesktop}\VnmrJ; Filename: {app}\bin\vnmrj.exe; Tasks: desktopicon; Components: VNMR; WorkingDir: {app}
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\VnmrJ; Filename: {app}\bin\vnmrj.exe; Tasks: quicklaunchicon; Components: VNMR
Name: {userprograms}\{groupname}\VnmrJ Adm; Filename: {app}\bin\vnmrj_adm.exe; Components: VNMR
Name: {group}\VnmrJ Debug; Filename: {app}\bin\vnmrj_debug.exe; Components: VNMR

[Run]

; load.nmr arguments are seperated by COMMAS, each argument needs a comma after it.
Filename: {src}\code\loadnmr.bat; Description: loadnmr; Parameters: {code:GetSourceDir}, win , '{code:GetConsoleType}' , '{code:GetSourceDir}' , '{code:GetVnmrDir}' , '{code:GetUserName}' , '{code:GetGroupName}' , '/home' , {code:GetNmrLnk} , 'no' , {code:GetComponentList} , {code:GetOptionsList}; Tasks: 
;Filename: {src}\code\tclsetup.exe; Components: VNMR; Check: IsTclInstalled

[Components]
Name: VNMR; Description: VNMR; Types: vnmrs; ExtraDiskSpaceRequired: 131817000
Name: Fiddle_Example; Description: Fiddle Example; Types: vnmrs; ExtraDiskSpaceRequired: 392000
Name: Gradient_shim; Description: Gradient shim; Types: vnmrs; ExtraDiskSpaceRequired: 196000
Name: Japanese; Description: Japanese files; Types: vnmrs; ExtraDiskSpaceRequired: 3704000
Name: ProTune; Description: ProTune; Types: vnmrs; ExtraDiskSpaceRequired: 57000
Name: Jmol; Description: Jmol; Types: vnmrs; ExtraDiskSpaceRequired: 3536000
Name: JChemPaint; Description: JChemPaint; Types: vnmrs; ExtraDiskSpaceRequired: 7264000
Name: PFG; Description: PFG; Types: vnmrs; ExtraDiskSpaceRequired: 1408000
Name: Autotest; Description: Autotest; Types: vnmrs; ExtraDiskSpaceRequired: 2696000
Name: Userlib; Description: Userlib; Types: vnmrs; ExtraDiskSpaceRequired: 67072000

[Types]
Name: vnmrs; Description: VNMRS; Flags: iscustom

[Registry]
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: vnmrsystem_win; ValueData: {app}; Components: VNMR
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: PGHOST; ValueData: localhost; Components: VNMR; Tasks: 
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: PGPORT; ValueData: 5432; Components: VNMR
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: PGNETWORK_SERVER; ValueData: no; Components: VNMR

[UninstallRun]
Filename: {app}\uninstallvj.bat; Parameters: {app}; Flags: runhidden

[UninstallDelete]
Name: {app}; Type: filesandordirs; Components: 

[Code]
var
  ErrorCode: Integer;
  UserPage: TWizardPage;
  PasswordPage: TWizardPage;
  UsagePage: TInputOptionWizardPage;
  ErrorPage: TOutputMsgWizardPage;
  LabelUser, LabelGroup: TLabel;
  EditUser, EditGroup: TEdit;
  CheckBox: TCheckBox;
  CheckBoxArray: array of TCheckBox;
  LblArray: array of TLabel;
  PasswordEditArray: array of TPasswordEdit;
  OptionalComponentArray: array of String;
  Components, OptionalComponents: String;
  Upgrade: Boolean;


procedure CreateTheWizardPages;
var
  BitmapImage: TBitmapImage;
  BitmapFileName: String;
  i, size, top: Integer;
begin
  size := 1;
  top := 0;
  SetArrayLength(CheckBoxArray, size);
  SetArrayLength(LblArray, size);
  SetArrayLength(PasswordEditArray, size);
  SetArrayLength(OptionalComponentArray, size);
  //OptionalComponentArray[0] := 'Diffusion';
  //OptionalComponentArray[1] := 'LC-NMR';
  //OptionalComponentArray[1] := 'STARS';
  //OptionalComponentArray[2] := 'BIR_Shapes';
  //OptionalComponentArray[3] := 'DOSY';
  OptionalComponentArray[0] := '3D_shimming';
  //OptionalComponentArray[6] := '768_AS';
  //OptionalComponentArray[5] := 'VAST';
  //OptionalComponentArray[8] := 'FDM';

  PasswordPage := CreateCustomPage(wpSelectComponents, 'VnmrJ Optional Packages', 'Please enter the password for the selected VnmrJ Optional Packages.');

  for i := 0 to (GetArrayLength(CheckBoxArray)-1) do
  begin
    if not (i = 0) then
      top := CheckBoxArray[i-1].Top + CheckBoxArray[i-1].Height + ScaleY(8);

    CheckBoxArray[i] := TCheckBox.Create(PasswordPage);
    CheckBoxArray[i].Top := top;
    CheckBoxArray[i].Width := PasswordPage.SurfaceWidth div 3 - ScaleX(8);
    CheckBoxArray[i].Height := ScaleY(17);
    CheckBoxArray[i].Caption := OptionalComponentArray[i];
    CheckBoxArray[i].Checked := False;
    CheckBoxArray[i].Parent := PasswordPage.Surface;

    LblArray[i] := TLabel.Create(PasswordPage);
    LblArray[i].Top := top;
    LblArray[i].Left :=  CheckBoxArray[i].Left + CheckBoxArray[i].Width;
    LblArray[i].Caption := 'Password:';
    LblArray[i].Width := CheckBoxArray[i].Width;
    LblArray[i].Parent := PasswordPage.Surface;

    PasswordEditArray[i] := TPasswordEdit.Create(PasswordPage);
    PasswordEditArray[i].Left := CheckBoxArray[i].Width + LblArray[i].Width;
    PasswordEditArray[i].Top := top;
    PasswordEditArray[i].Width := CheckBoxArray[i].Width;
    PasswordEditArray[i].Text := '';
    PasswordEditArray[i].Parent := PasswordPage.Surface;
  end;

  // Add/Install Page
  UsagePage := CreateInputOptionPage(wpWelcome,
    'Maintainence Mode', 'This program is already installed on your system. You can reinstall it or add components to it',
    'Please specify your selection below, then click Next.',
    True, False);
  UsagePage.Add('Reinstall');
  UsagePage.Add('Add Components');
  UsagePage.SelectedValueIndex := 0;

end;

procedure InitializeWizard;
var
  AboutButton, CancelButton: TButton;
  URLLabel: TNewStaticText;
  BackgroundBitmapImage: TBitmapImage;
  BackgroundBitmapText: TNewStaticText;
begin
  { Create the pages }

  UserPage := CreateCustomPage(wpSelectDir,
    'User Information',
    'Please specify your user name and group name, then click Next.');
  //UserPage.Add('User Name:', False);
  //UserPage.Add('Group Name:', False)

  LabelUser := TLabel.Create(UserPage);
  LabelUser.Top := 0;
  LabelUser.Width := UserPage.SurfaceWidth div 2 - ScaleX(8);
  LabelUser.Caption := 'VnmrJ Administrator:';
  LabelUser.Parent := UserPage.Surface;

  EditUser := TEdit.Create(UserPage);
  EditUser.Top := 0;
  EditUser.Width := UserPage.SurfaceWidth div 2 - ScaleX(8);
  EditUser.Left := LabelUser.Left + LabelUser.Width;
  EditUser.Text := '';
  EditUser.ReadOnly := True;
  EditUser.Parent := UserPage.Surface;

  LabelGroup := TLabel.Create(UserPage);
  LabelGroup.Top := LabelUser.Top + LabelUser.Height + ScaleY(17);
  LabelGroup.Width := LabelUser.Width;
  LabelGroup.Left := LabelUser.Left;
  LabelGroup.Caption := 'Group Name:';
  LabelGroup.Parent := UserPage.Surface;

  EditGroup := TEdit.Create(UserPage);
  EditGroup.Top := LabelGroup.Top;
  EditGroup.Width := UserPage.SurfaceWidth div 2 - ScaleX(8);
  EditGroup.Left := EditUser.Left;
  EditGroup.Text := 'nmr';
  EditGroup.Parent := UserPage.Surface;

  CheckBox := TCheckBox.Create(UserPage);
  CheckBox.Top := LabelGroup.Top + LabelGroup.Height + ScaleY(17);
  CheckBox.Width := UserPage.SurfaceWidth;
  CheckBox.Height := ScaleY(17);
  CheckBox.Caption := 'Allow VnmrJ Administrator to have administrative privileges for this computer';
  CheckBox.Checked := True;
  CheckBox.Parent := UserPage.Surface;

  {UserPage.Values[0] := GetPreviousData('Name', 'vnmr1');
  UserPage.Values[1] := GetPreviousData('Group', 'nmr');    }
  //EditUser.Text := GetPreviousData('Name', ExpandConstant('{sysuserinfoname}'));
  EditUser.Text := ExpandConstant('{username}');
  EditGroup.Text := GetPreviousData('Group', 'nmr');

  { Custom wizard pages }

  CreateTheWizardPages;

  { Error page }
  ErrorPage := CreateOutputMsgPage(UserPage.ID, 'VnmrJ Administrator', '',
    'Note: VnmrJ administrator must have administrative privileges on this computer' #13#13 +
    'Please go back and allow this user to be an administrator or cancel the installation to Exit');

  { Other custom controls }

  CancelButton := WizardForm.CancelButton;

  BackgroundBitmapImage := TBitmapImage.Create(MainForm);
  BackgroundBitmapImage.Left := 50;
  BackgroundBitmapImage.Top := 100;
  //BackgroundBitmapImage.AutoSize := True;
  BackgroundBitmapImage.Stretch := True;
  //BackgroundBitmapImage.Width := MainForm.Width - (2*BackgroundBitmapImage.Left);
  BackgroundBitmapImage.Width := WizardForm.MainPanel.Width - BackgroundBitmapImage.Left;
  BackgroundBitmapImage.Height := MainForm.Height - (2*BackgroundBitmapImage.Top);
  BackgroundBitmapImage.Bitmap := WizardForm.WizardBitmapImage.Bitmap;
  BackgroundBitmapImage.Parent := MainForm;

  BackgroundBitmapText := TNewStaticText.Create(MainForm);
  BackgroundBitmapText.Left := BackgroundBitmapImage.Left;
  BackgroundBitmapText.Top := BackgroundBitmapImage.Top + BackgroundBitmapImage.Height + ScaleY(8);
  //BackgroundBitmapText.Caption := 'TBitmapImage';
  BackgroundBitmapText.Parent := MainForm;

end;

procedure RegisterPreviousData(PreviousDataKey: Integer);
var
  UsageMode: String;
begin
  { Store the settings so we can restore them next time }
  {SetPreviousData(PreviousDataKey, 'Name', UserPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'Group', UserPage.Values[1]);   }
  SetPreviousData(PreviousDataKey, 'Name', EditUser.Text);
  SetPreviousData(PreviousDataKey, 'Group', EditGroup.Text);
end;

function GetPathInstalled( AppID: String ): String;
var
   sPrevPath: String;
begin
  sPrevPath := '';
  if not RegQueryStringValue( HKLM,
    'Software\Microsoft\Windows\CurrentVersion\Uninstall\'+AppID+'_is1',
    'Inno Setup: App Path', sPrevpath) then
    RegQueryStringValue( HKCU, 'Software\Microsoft\Windows\CurrentVersion\Uninstall'+AppID+'_is1' ,
      'Inno Setup: App Path', sPrevpath);

  Result := sPrevPath;
end;

function GetSourceDir(Param: String): String;
begin
  Result := ExpandConstant('{src}')+ '\code';
  //Result := 'E:\nv_vj02.22\code';
end;

function GetVersion(Param: String): String;
var
  DestDir, SourceDir: String;
  aStrLine: TArrayOfString;
  strLine: String;
  bDevelopment: Boolean;
  i: Integer;
begin
  // Get the vnmrrev file
  SourceDir := GetSourceDir('');
  SourceDir := SourceDir + '\..\vnmrrev';
  //MsgBox(SourceDir, mbInformation, MB_OK);
  // Read the vnmrrev file into array
  setArrayLength(aStrLine, 10);
  LoadStringsFromFile(SourceDir, aStrLine);
  bDevelopment := False;

  // if the file has development keyword, then append the date
  for i := 0 to (GetArrayLength(aStrLine)-1) do
  begin
    if  (i = 0) then begin
      if (Pos('development', strLine) = 0) or (Pos('DEVELOPMENT', strLine) = 0) then
        bDevelopment := True;
        strLine := aStrLine[i]
    end else begin
      if (bDevelopment) then
        strLine := strLine + ' ' + aStrLine[i];
    end;
  end;

  // Remove version, revision, and comma from file name, and change spaces to underscore
  StringChange(strLine, 'VERSION', '');
  StringChange(strLine, 'REVISION', '');
  StringChange(strLine, ',', '');
  StringChange(strLine, '  ', ' ');
  StringChange(strLine, ' ', '_');

  Result := strLine;

end;

function GetDestDir(Param: String): String;
var
  DestDir: String;
begin
  // Get the SFUDIR value for DestDir
  DestDir := GetEnv('SFUDIR');
  if (DestDir = '') then
    DestDir := 'C:\SFU';

  Result := AddBackSlash(DestDir) + GetVersion('');
end;

function InitializeSetup(): Boolean;
  var
    Sfudir: String;
    Setup: Boolean;
    Names: TArrayOfString;
    I: Integer;
    S: String;
    sPrevPath: String;
	  sPrevID: String;
begin
  Sfudir := GetEnv('SFUDIR');
  if not (Sfudir = '') then
    Result := True
  else begin
    MsgBox('Services For Unix is not installed. Please insert the CD to install SFU first and then continue with VnmrJ installtion.', mbInformation, MB_OK);
    Result := False;
  end;

  sPrevID := getDestDir('');
  sPrevPath := GetPathInstalled( sprevID );

  if ( Length(sPrevPath) > 0 ) then
    Upgrade := True
  else
    Upgrade := False;

end;

function ShouldSkipPage(PageID: Integer): Boolean;
var
  ResultCode: Integer;
  bAdministrator: Boolean;
  aStrLine: TArrayOfString;
  strPath, strUser, strLine : String;
begin
  { Skip pages that shouldn't be shown }
  if (PageID = ErrorPage.ID) then
  begin
    strPath := GetEnv('TEMP');
    //strUser := UserPage.Values[0];
    strUser := EditUser.Text;
    //check if the vnmrj administrator is in the Administrators group
    if Exec(ExpandConstant('{src}\isAdminGroup.bat'), strUser + ' ' + strPath, '', SW_HIDE,
            ewWaitUntilTerminated, ResultCode) then
    begin
      strPath := strPath + '\isAdmin';
      setArrayLength(aStrLine, 10);
      LoadStringsFromFile(strPath, aStrLine);
      strLine := aStrLine[0];
      bAdministrator := (CompareText(Trim(strLine), 'yes') = 0);
    end else
      bAdministrator := false;

    if (CheckBox.CHECKED) then
    begin
      {if (bAdministrator = false) then
        bCreateAdministrator := true;   }

      Result := True;
    end else begin
      if (bAdministrator = false) then
        Result := False
      else
        Result := True
    end;
  end else if (PageID = UsagePage.Id) then
  begin
    if (Upgrade = true) then
      Result := False
    else
      Result := True;
  end else if (PageID = wpSelectDir) or (PageID = wpSelectProgramGroup) then
  begin
    // Add Components
    if (UsagePage.SelectedValueIndex = 1) then
      Result := True
    // Reinstall
    else
      Result := False;
  end else
    Result := False;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
   if CurPageID=ErrorPage.ID then
     WizardForm.NextButton.Enabled:=false;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
var
  I: Integer;
  ResultCode: Integer;
  aStrLine: TArrayOfString;
  strMsg, strLine, strPath, strUser: String;
begin
  { Validate certain pages before allowing the user to proceed }
  if CurPageID = UserPage.ID then begin
    //if UserPage.Values[0] = '' then begin
    if EditUser.Text = '' then begin
      MsgBox('You must enter VnmrJ Administrator username.', mbError, MB_OK);
      Result := False;
   end else begin
      //check group name
      {if UserPage.Values[1] = '' then
         UserPage.Values[1] := 'nmr';   }
      if EditGroup.Text = '' then
        EditGroup.Text := 'nmr';
      Result := True;
    end;
  end else
    Result := True;
end;

function GetDataDir(Param: String): String;
begin
  Result := ExpandConstant('{app}');
end;

function GetVnmrDir(Param: String): String;
begin
  Result := WizardDirValue;
end;

function GetUserName(Param: String): String;
begin
  //Result := UserPage.Values[0];
  Result := EditUser.Text;
end;

function GetGroupName(Param: String): String;
begin
  //Result := UserPage.Values[1];
  Result := EditGroup.Text;
end;

function GetConsoleType(Param: String): String;
begin
  Result := WizardSetupType(false);
end;

function GetNmrLnk(Param: String): String;
begin
  if IsComponentSelected('vnmr') then
    Result := 'yes'
  else
    Result := 'no';
end;

function GetOptionsList(Param: String): String;
var
  password: String;
  i: Integer;
begin
  for i := 0 to (GetArrayLength(CheckBoxArray)-1) do
  begin
    if (CheckBoxArray[i].Checked) then
    begin
      OptionalComponents := OptionalComponents + '+' + CheckBoxArray[i].Caption;
      password := PasswordEditArray[i].Text;
      if (password = '') then
        password := 'xxxxxxx';
      OptionalComponents := OptionalComponents + '+' + password;
    end;
  end;
  Result := OptionalComponents;
end;

function GetComponentList(Param: String): String;
begin
  Components := WizardSelectedComponents(true);
  Insert('+', Components, 0);
  Insert('+', Components, Length(Components)+1);
  StringChange(Components, '"', '');
  StringChange(Components, ' ', '_');
  StringChange(Components, ',', '+');
  Result := Components;
end;

function IsTclInstalled(): Boolean;
var
  TclInstalled: Boolean;
  TclCheckResult: Boolean;
  TclChecked: Boolean;
  InstalledDir: String;
begin
  InstalledDir := ExpandConstant('{pf}') + '\Tcl';
  TclInstalled := DirExists(InstalledDir);
  if not TclInstalled then begin
    TclCheckResult := MsgBox('Tcl does not appear to be installed on your system. Do you want to install Tcl 7.6 and Tk 4.2?', mbConfirmation, MB_YESNO) = idYes;
    TclChecked := True;
  end;
  Result := TclCheckResult;
end;
