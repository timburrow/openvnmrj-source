Protocol: Shapedtwopul1d  Sequence: shapedtwopul1d.c  Apptype: solidseq1d

Description: 

   Two shaped pulses with a delay (d2) in between. Used for 
   inversion recovery T1 and to measure the 180 degree inversion 
   pulse width. 

Parameter Groups:

shp1X:  Module: yes (first shaped pulse)
Sequence:  r2inv1ds.c
Description:  Implements a named shaped pulse in wavelib with 
              pBox on the obs channel.  Used invidually or 
              with other shapes in a simshapedpulse.
Parameters:  Sequence Page
       chXshp1 - must be 'obs'. 
       wvXshp1 - pBox pulse waveshape from wavelib.
       aXshp1 - amplitude of pBox pulse.
       dbXshp1 - attenuator setting for pBox pulse.
       tXshp1 - predelay for pBox pulse.
       pwXshp1 - width of pBox pulse.
       phXshp1 - starting small angle phase adjust.
       stXshp1 - shape parameter - see pBox documentation
Implementation:  PBOXPULSE shp1 = getpboxpulse("shp1X",0);
Underscore function: _pboxpulse(shp1,phXshp1);
Notes:  phXshp1 is the overall phase table for the shape.

shp2X:  Module: yes (second shaped pulse) 
Sequence:  r2inv1ds.c
Description:  Implements a named shaped pulse in wavelib with 
              pBox to on the obs channel. Used invidually or 
              with other shapes in a simshapedpulse.
Parameters:  Sequence Page
       chXshp2 - must be 'obs'. 
       wvXshp2 - pBox pulse waveshape from wavelib.
       aXshp2 - amplitude of pBox pulse.
       dbXshp2 - attenuator setting for pBox pulse.
       tXshp2 - predelay for pBox pulse.
       pwXshp2 - width of pBox pulse.
       phXshp2 - starting small angle phase adjust.
       stXshp2 - shape parameter - see pBox documentation
Implementation:  PBOXPULSE shp1 = getpboxpulse("shp1X",0);
Underscore function: _pboxpulse(shp1,phXshp1);
Notes:  phXshp1 is the overall phase table for the shape.

Hseq:  Module:  yes 
Sequence:  tancpx.c      
Description:  Chooses SPINAL or TPPM decoupling on the dec channel
              during acquisition.  
Parameters:  Sequence Page - Hspinal and Htppm groups overlap. 
       Hseq - chooses the decoupling sequence, TPPM or SPINAL. 
Implementation:  DSEQ dec = getdseq("H");  The router implements 
              getspinal() or gettppm(). 
Underscore functions: _dseqon(dec); runs _tppm(); or _spinal();
              _dseqoff(dec); runs decprgoff();  

Hspinal:  Module:  yes 
Sequence:  tancpx.c  
Description:  Implements SPINAL decoupling on the dec channel during 
              acquisition.  
Parameters:  Sequence Page
       aHspinal - amplitude of the dec channel. 
       pwHspinal - approximate 180-degree flip angle on resonance. 
       phHspinal - +/- small angle phase. SPINAL64 is implemented 
              with phases = +/- 1.0, +/- 1.5 and +/-2.0 times phHspinal. 
       chHspinal = 'dec' must be set (not shown).
Implementation: SPINAL dec = getspinal("H"); or DSEQ dec = 
              getdseq("H");  
Underscore functions: _spinal(dec); and decprgoff(); or _dseqon(dec);
              and _dseqoff(dec);   

Htppm:  Module:  yes 
Sequence:  tancpx.c      
Description:  Implements TPPM decoupling on the dec channel during 
              acquisition.  
Parameters:  Sequence Page
       aHtppm - amplitude of the dec channel. 
       pwHtppm - approximate 180-degree flip angle on resonance. 
       phHtppm - +/- small angle phase. TPPM is implemented 
              with phases = +/- 1.0 times phHtppm for alternating pulses.
       chHtppm = 'dec' must be set (not shown).
Implementation: TPPM dec = gettppm("H"); or DSEQ dec = getdseq("H");
Underscore functions: _tppmon(dec); and decprgoff(); or _dseqon(dec);
              and _dseqoff(dec);

