Protocol: Redor2tancp  Sequence: redor2tancp.c  Apptype: solidseq1d

Description: 

Rotational Echo Double Resonance (REDOR) with constant, linear or 
tangent-ramped preparation, XY8 decoupling with pulses on Y, and a 
refocusing pulse on X, with a choice of SPINAL64 or TPPM decoupling 
during both acquisition and REDOR evolution. Used to measure X-Y bond 
distances for inorganic and organic materials. 

Redor2tancp is the favored REDOR sequence if homonuclear coupling or 
quadrupole coupling is present for the X nuclei. Rotationally 
synchronized pi pulses interfere with the refocusing of these 
interactions into rotational echos and dephase the magnetization. 
Redor2tancp has only one refocusing pulse on X. 

Additional Software:

reset_redor2 - This macro uses the calibrated values of pwX90 and pwY90 
to set up xy8Y. The parameters for decoupling in Htppm and Hspinal are 
copied to Hmixtppm and Hmixspinal.  

redoranal2 - This macro creates a deltaS/S plot for REDOR data obtained as 
a double array of cycles with alternating control and REDOR spectra. 

Setup: 

Be sure that an HXY probe is set up for three-channel observe and set 
the parameters probeConnect and preAmpConfig in the Channels page. 13C-
15N glycine, 10% in natural abundance, is an excellent REDOR standard. 

Load a calibrated data set and select the protocol Redor2tancp.  For 
new nuclei calibrate pwX90 and pwY90 with Onepul or Tancpx and then 
select Redor2tancp. 

Select the desired decoupling method, TPPM or SPINAL. The manual file 
onepul describes calibration of decoupling. 

Calibrate the obs X nucleus with Onepul or Tancpx and place the 
resonance for which REDOR will be observed on-resonance. 

To calibrate the third channel Y nucleus set it as obs and be sure that 
the obs transmitter switches to the correct transmitter, 3 or 4.  The 
switch will take place if the Y nucleus is in the correct position of 
probeConnect. See the manual file tunerp for instructions in setting up 
three-channel experiments and observing on the third channel. Be sure 
the third-channel nucleus is on resonance. 

With third-channel obs copy calibrations aY90 = aX90 and pwY90 = pwX90. 
Also set dof2 = tof. Return to the original obs nucleus and restore the 
original calibrations for channel-two obs.  

Select Redor2tancp.  The protocol sets aX180 = aX90, aYxy8= aY90, 
pwX180 = 2.0*pwX90 and pwYxy8 = 2.0*pwY90.  

Read the name aYxy8 as the "amplitude of the "Y" channel for the group 
xy8Y located on the "Y" channel" of the sequence.  Note that the "xy" 
of "xy8" refers to the 0 and 90-degree phases of the sequence while the 
"Y" refers to the channel on which XY8 is applied. 
Note that for nuclei other than spin 1/2 one may need to fine-adjust 
pwXxy8 and pwYxy8. 

Set nYxy8 = 0 and onYxy8 = 1 to collect a CP spectrum with no REDOR 
evolution. 

Array nYxy8 from 0 to 64 in steps of 8 to observe the T2 of the observe 
nucleus. Optimize TPPM or SPINAL decoupling during REDOR evolution with 
the parameters of Hmixtppm or Hmixspinal.   It is helpful to set nYxy8 
= 32 and array the parameters of TPPM or SPINAL for maximum intensity.  
Note that line width is unaffected because one is optimizingT2 during 
REDOR evolution. 

First array nYxy8 from 0 to 64 in steps of 2. Then set onYxy8 = 1,2. 
Collect the REDOR data. 

To process, pick the peak of interest and type fp on the command line. 
Type redoranal2 on the command line and enter the fraction natural 
abundance to cause the REDOR curve to approach 1.0. 

Parameter Groups: 

90H:  Module:  no
Sequence:  tancpx.c  
Description:  Provides a 90-degree pulse on dec that can be used as a 
              preparation pulse.  Also used to store the dec calibration.
Parameters:  Channels Page
       aH90  - the amplitude of the pulse.
       pwH90 - the pulse length.

cpHX:  Module:  yes
Sequence:  tancpx.c
Description:  Implements constant, linear or tangent-ramped cross 
              polarization from dec to obs.
Parameters:  Sequence Page
       shHX - 'c', constant, 'l', linear and 't', tangent shape on the 
              channel designated with chHX. 
       chHX - the variable-amplitude channel, 'fr' from or 'to', to. 
       aHhx - median amplitude of the dec channel.
       aXhx - median amplitude of the obs channel.
       bHX - +/- tangent curvature (>0 to 1.0e5).  
       dHX - amplitude width of the ramp. A negative width sets a ramp 
              that starts high and decreases in amplitude.
       tHX - contact time
       ofHX - overall offset on the variable channel
       frHX = 'dec' - channel with the initial polarization (must be 
              set - not shown).           
       toHX = 'obs' -  channel with the final polarization (must be set 
              - not shown). 
Implementation:  CP hx = getcp("HX",0.0,0.0,0,1); 
Underscore functions: _cp_(hx,phHhx,phXhx);  
 
xy8Y:  Module:  no
Sequence:  redor2tancp.c      
Description:  Implements dec2 pulses at the middle of each rotor period 
              with the XY8 phase cycle, used for REDOR evolution in pairs 
              about an obs refocusing pulse.
Parameters:  Sequence Page
       aYxy8 - amplitude of the dec2 pulses. 
       pwYxy8 - 180-degree flip on dec2. 
       nXYxy8 - two times number of rotor cycles. xy8Y is used in pairs 
              about an obs refocusing pulse.  
       onYxyxy8 - "2" provides dec2 pulses and "1" is a control without 
              dec2 pulses. 

180X:  Module:  no
Sequence:  twopul.c    
Description:  Provides a 180-degree pulse on obs that can be used as an 
              inversion or a refocusing pulse.  
Parameters:  Sequence Page
      aX180 -  the amplitude of the pulse.
      pwX180 - the pulse length. 

Hmixseq:  Module: yes 
Sequence:  redor1tancp.c
Description:  Chooses SPINAL or TPPM decoupling on the dec channel
              during F1 and mixing periods when Hseq is used for
              acquisition.
Parameters:  Sequence Page - the Hmixspinal and Hmixtppm groups
              overlap.  Hmixseq chooses the decoupling sequence TPPM
              or SPINAL.
Implementation:  DSEQ mix = getdseq("H"); The router implements
              getspinal() or gettppm(), as selected.
Underscore functions:  _dseqon(mix); runs _tppm(); or _spinal();
             _dseqoff(mix); runs decprgoff(mix);

Hmixspinal:  Module: yes
Sequence:  redor1tancp.c
Description:  Implements SPINAL decoupling on the dec channel during
              typical F1 and mixing periods when Hspinal is used for
              acquisition.
Parameters:  Sequence Page
       aHmixspinal - amplitude of the dec channel.
       pwHmixspinal - approximate 180-degree flip.
       phHmixspinal - +/- small angle phase. SPINAL64 is implemented
              with phases = +/- 1.0, +/- 1.5 and +/-2.0 times
              phHmixspinal.
       chHmixspinal = 'dec' must be set (not shown).
Implementation: SPINAL mix = getspinal("H"); or DSEQ mix =
             getdseq("H");
Underscore functions: _spinal(mix); and decprgoff(); or _dseqon(mix);
             and _dseqoff(mix);
        
Hmixtppm:  Module: yes
Sequence:  redor1tancp.c
Description:  Implements TPPM decoupling on the dec channel during
              typical F1 and mixing periods when Htppm is used for
              acquisition.
Parameters:  Sequence Page
       aHmixtppm - amplitude of the dec channel.
       pwHmixtppm - approximate 180-degree flip angle on resonance.
       phHmixtppm - +/- small angle phase. TPPM is implemented
              with phases = +/- 1.0 times phHmixtppm for alternating
              pulses.
       chHmixtppm = 'dec' must be set (not shown).
Implementation: TPPM mix = gettppm("H"); or DSEQ mix = getdseq("H");
Underscore functions: _tppm(mix); and decprgoff(); or _dseqon(mix); and
              _dseqoff(mix);

Hseq:  Module:  yes 
Sequence:  tancpx.c      
Description:  Chooses SPINAL or TPPM decoupling on the dec channel 
              during acquisition.
Parameters:  Sequence Page - the Hspinal and Htppm groups overlap. 
       Hseq - chooses the decoupling sequence, TPPM or SPINAL. 
Implementation:  DSEQ dec = getdseq("H");  The router implements 
              getspinal() or gettppm(). 
Underscore functions: _dseqon(dec); runs _tppm(); or _spinal();
              _dseqoff(dec); runs decprgoff();  

Hspinal:  Module:  yes 
Sequence:  tancpx.c  
Description:  Implements SPINAL decoupling on the dec channel during 
              acquisition.  
Parameters:  Sequence Page
       aHspinal - amplitude of the dec channel. 
       pwHspinal - approximate 180-degree flip angle on resonance. 
       phHspinal - +/- small angle phase. SPINAL64 is implemented with 
               phases = +/- 1.0, +/- 1.5 and +/-2.0 times phHspinal. 
       chHspinal = 'dec' must be set (not shown).
Implementation: SPINAL dec = getspinal("H"); or DSEQ dec = 
               getdseq("H");  
Underscore functions: _spinal(dec); and decprgoff(); or _dseqon(dec); 
               and _dseqoff(dec);   

Htppm:  Module:  yes 
Sequence:  tancpx.c      
Description:  Implements TPPM decoupling on the dec channel during 
              acquisition.  
Parameters:  Sequence Page
       aHtppm - amplitude of the dec channel. 
       pwHtppm - approximate 180-degree flip angle on resonance. 
       phHtppm - +/- small angle phase. TPPM is implemented 
              with phases = +/- 1.0 times phHtppm for alternating pulses.  
       chHtppm = 'dec' must be set (not shown).
Implementation: TPPM dec = gettppm("H"); or DSEQ dec = getdseq("H");   
Underscore functions: _tppmon(dec); and decprgoff(); or _dseqon(dec); 
              and _dseqoff(dec);   
