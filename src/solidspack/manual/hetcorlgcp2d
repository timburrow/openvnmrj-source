Protocol: Hetcorlgcp2d  Sequence: hetcorlgcp2d.c  Apptype: solidseq1d

Description:

A sequence to correlate X and H chemical shifts through the X-H dipolar
interaction with mixing through Lee-Goldburg CP. Frequency switched Lee
Goldburg decoupling is used during F1 to suppress the proton
homonuclear dipolar interaction.  HETCOR is used to resolve the proton
chemical shift spectrum and to assign X-H pairs.

Additional Software:

reset_hetcor - This macro uses the calibrated values of pwH90 and aH90
to calculate the intial parameters for the fslgH waveform and sets up
2D parameters. This macro is run from the protocol.

Setup:

Load a calibrated data set and select the protocol Hetcorlgcp2d. For a
new nucleus calibrate CP with Onepul and Tancpx and then set up Lee
Goldburg CP with Lgcp.
Then select the protocol Hetcorlgcp2d.
   
Select the desired decoupling method, TPPM or SPINAL. The manual file
onepul describes calibration of decoupling.

The macro reset_hetcor is run from the Hetcorlgcp2d protocol.  This
macro performs the next 4 steps.

1. Set aHfslg = aH90.  Set pwHtilt = pwH90*35.3/90.0.  pwHtilt has the
same amplitude as aH90. 
2. Set pwHfslg = sqrt(2/3)*4.0*pwH90.  pwHfslg is rounded to a 100 ns
grid and aHfslg is adjusted to accommodate the change.
3. Set ofdHfslg = 1.0/(sqrt(3)*pwHfslg*1e-6)). Note that ofdHfslg = -
1.0/(sqrt(3)*pwHfslg*1e-6)) is incorrect.
4. Set sw1 = 1.0/(8.0*pwHfslg*1e-6). Set ni = 64 and phase = 1,2.

The parameter pwHfslg is rounded to a 100 ns grid. The value of aHfslg
is readjusted slightly to accommodate the rounding of pwHfslg so that
it has an exact 360 degree flip angle.

Set pwX90 = 0.0 to not place an X refocusing pulse in the middle of the
F1 delay.  Most HETCOR's are run without a refocusing pulse.  A
refocusing pulse is only desirable if the X-H J-coupling is limiting
proton resolution.  MAS is adequate to remove the X-H dipolar
interaction.   If a refocusing pulse is desired then the spin rate must
be synchronized with the F1 dwell so that the refocusing pulse falls at
a multiple of the rotor period

Set dof to a value about 4000 Hz lower than its on resonance value.
The F1 spectrum will be to the left of the center and FSLG resolution
will be the best with this offset if phase transient is present.  There
will usually be a center spike in F1.

Collect a 2D dataset and process with wft2da.  Adjust ni to accommodate
greater or lesser proton resolution of the sample in F1.

NOTE: This HETCOR calculates a new wavefrom in F1 for each increment for
tilt1H, tilt2H, tilt3H and fslgH.  With 64 increments there should be
about a 30 second start up time.

HETCOR is very sensitive to phase transient on the proton channel. Side
effects of a large transient are a short T2 and an offset of the
spectrum in F1.  It is recommended that one spend significant effort to
remove phase transient for HETCOR.  The procedure for phase-transient
removal in the manual file tunerp.

A good sample for a HETCOR setup is natural abundance glycine. A quick
HETCOR can be ni = 64, nt = 4, d1 = 1 and ss = 4.  Hetcorlgcp2d works
best with spin rate of 8 to 14 kHz.  Calibrate the pwH90 = 2.5 us to do
100 kHz FSLG during F1 if the probe has the  appropriate specification.

The indirect axis of HETCOR is scaled by the value scalesw1 = sqrt(3).
It may be necessary to adjust scalesw1 to obtain the correct ppm scale.
A rough calibration with glycine is obtained by putting two cursors on
the two methylene lines of glycine. On the command line type scalesw1 =
dfrq/delta.  In general, set two lines with a known ppm difference  delta-ppm
and set scalesw1 = delta-ppm*dfrq/delta.

To reference F1 of a scaled HETCOR spectrum put a cursor on the peak
with a known ppm value and type rl1(ppm*dfrq/scalesw1). Note that
HETCOR spectra are displayed with axis ='pd' and refsource = 'dfrq'.

Parameter Groups:

90H:  Module:  no
Sequence:  tancpx.c
Description:  Provides a 90-degree pulse on dec that can be used as a
              preparation pulse. Also used to store the dec calibration.
Parameters:  Channels Page
       aH90  - the amplitude of the pulse.
       pwH90 - the pulse length.

cpHX:  Module:  yes
Sequence:  tancpx.c
Description:  Implements constant, linear or tangent-ramped cross
              polarization from dec to obs.
Parameters:  Sequence Page
       shHX - 'c', constant, 'l', linear and 't', tangent shape on the
              channel designated with chHX.
       chHX - the variable-amplitude channel, 'fr' from or 'to', to.
       aHhx - median amplitude of the dec channel.
       aXhx - median amplitude of the obs channel.
       bHX - +/- tangent curvature (>0 to 1.0e5).
       dHX - amplitude width of the ramp. A negative width sets a ramp
              that starts high and decreases in amplitude.
       tHX - contact time
       ofHX - overall offset on the variable channel
       frHX = 'dec' -  channel with the initial polarization (must be
              set - not shown).
       toHX = 'obs' -  channel with the final polarization (must be set
              - not shown).
Implementation:  CP hx = getcp("HX",0.0,0.0,0,1);
Underscore functions: _cp_(hx,phHhx,phXhx);

fslgH:  Module:  yes
Sequence:  tancpxfslg.c
Description:  Implements "frequency switched Lee Goldburg", FSLG,
              homonuclear decoupling on the dec channel.
Parameters:  Sequence Page
       aHfslg - amplitude of the FSLG dec pulses.
       pwHfslg - 360-degree flip on dec, off resonance (the length of
              each of the two FSLG pulses).
       nHfslg - FSLG cycles represented in the .DEC file.
       ofdHfslg - +/- frequency offset of alternating pulses, a
              negative value indicates that
                     the first pulse has negative offset.
       ofHfslg - overall frequency offset.
       chHfslg = 'dec' must be set (not shown).
Implementation: MPSEQ fslg = getfslg("fslgH",0,0.0,0.0,0,1);
Underscore functions: _MPSEQ functions.

scalef1H: (processing)  Module:  no
Sequence:  hetcorlgcp2d.c
Description:  Shows the F1 scale factor, scalesw1, for evolution of the
              dec nuclei under a multiple-pulse waveform.
Parameters:  Sequence Page
       scalesw1 - the F1 scale factor. Typically scalesw1 is the
              inverse of the mutiple-pulse scale factor.

Hseq:  Module:  yes
Sequence:  tancpx.c
Description:  Chooses SPINAL or TPPM decoupling on the dec channel
              during acquisition.
Parameters:  Sequence Page - the Hspinal and Htppm groups overlap.
       Hseq - chooses the decoupling sequence, TPPM or SPINAL.
Implementation:  DSEQ dec = getdseq("H");  The router implements
              getspinal() or gettppm().
Underscore functions: _dseqon(dec); runs _tppm(); or _spinal();
              _dseqoff(dec); runs decprgoff();

Hspinal:  Module:  yes
Sequence:  tancpx.c
Description:  Implements SPINAL decoupling on the dec channel during 
              acquisition.
Parameters:  Sequence Page
       aHspinal - amplitude of the dec channel.
       pwHspinal - approximate 180-degree flip angle on resonance.
       phHspinal - +/- small angle phase. SPINAL64 is implemented with
              phases = +/- 1.0, +/- 1.5 and +/-2.0 times phHspinal.
       chHspinal = 'dec' must be set (not shown).
Implementation: SPINAL dec = getspinal("H"); or DSEQ dec =
              getdseq("H");
Underscore functions: _spinal(dec); and decprgoff(); or _dseqon(dec);
              and _dseqoff(dec);

Htppm:  Module:  yes
Sequence:  tancpx.c
Description:  Implements TPPM decoupling on the dec channel during
acquisition.
Parameters:  Sequence Page
       aHtppm - amplitude of the dec channel.
       pwHtppm - approximate 180-degree flip angle on resonance.
       phHtppm - +/- small angle phase. TPPM is implemented
              with phases = +/- 1.0 times phHtppm for alternating pulses.
       chHtppm = 'dec' must be set (not shown).
Implementation: TPPM dec = gettppm("H"); or DSEQ dec = getdseq("H");
Underscore functions: _tppmon(dec); and decprgoff(); or _dseqon(dec);
              and _dseqoff(dec);
