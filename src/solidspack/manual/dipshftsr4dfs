Protocol: Dipshftsr4dfs  Sequence: dipshftsr4dfs.c  Apptype: solidsseq1d

Description:

   A spin echo experiment on "X" with "H" to "X" SR4 recoupling on "H" to 
   measure the "H"-"X" dipolar interaction of quadrupole nuclei with DFS 
   enhancement of the "X" signal, with TPPM or SPINAL decoupling.  

Additional Software 

reset_dipshfstr4 : This macro resets sr4 as in reset_sr4, sets up a 
       heteronuclear 2D experimentand synchronizes the spin echo 
       with the rotor.
       
Parameter Groups

90X:  Module:  no
Sequence:  onepul.c
Description:  Provides a 90-degree pulse on obs that can be used as a
              preparation pulse. Also used to store the obs calibration.
Parameters:  Channels Page
      aX90  - the amplitude of the pulse.
      pwX90 - the pulse length.

dfsX:  Module:  yes
Sequence:  onepuldfs.c (alias dfspX)
Description:  Implements a "double frequency sweep", DFS, pulse on the
              obs channel.
Parameters:  Sequence Page
       aXdfs - amplitude of obs DFS pulse.
       pwXdfs - width of the DFS pulse.
       of1Xdfs - initial frequency.
       of2Xdfs - final frequency.
       chXdfs = 'obs' must be set (not shown).
Implementation:  MPSEQ dfs = getdfs("dfsX",0,0.0,0.0,0,1);
Underscore function: _mpseq(dfs);

sr4H:  Module:  yes
Sequence:  dipshftsr4dfs.c.
Description:  Implements the SR4 (r4-sub1-sup2)3-SUP1 recoupling
              sequence on the dec channel.
Parameters:  Sequence Page
       aHsr4 - amplitude of dec pulses.
       pwHsr4 - 360-degree flip on dec.
       qHsr4 - SR4 cycles represented in the .DEC file.
       ofHsr4 - overall frequency offset.
       chHsr4 = 'dec' must be set (not shown).
Implementation: MPSEQ sr4 = getsr4("sr4H",0,0.0,0.0,0,1);
Underscore functions: _MPSEQ functions.

echoX: Module:  no
Sequence:  ssecho1d.c
Description:  Implements a refocusing pulse with delays before and after
              the pulse.
Parameters:  Sequence Page
       aXecho - amplitude of the obs pulses.
       t1Xecho - delay before the refocusing pulse.
       pwXecho - 180-degree flip on obs.
       t2Xecho - delay after the refocusing pulse.

Hseq:  Module:  yes
Sequence:  tancpx.c
Description: Chooses SPINAL or TPPM decoupling on the dec channel
             during acquisition
Parameters:  Sequence Page - the Hspinal and Htppm groups overlap
       Hseq - chooses the decoupling sequence, TPPM or SPINAL.
Implementation:  DSEQ dec = getdseq("H");  The router implements
             getspinal() or gettppm().
Underscore functions: _dseqon(dec); runs _tppm(); or _spinal();_
             dseqoff(dec); runs decprgoff();

Hspinal:  Module:  yes
Sequence: tancpx.c 
Description:  Implements SPINAL decouping on the dec channel during
              acquisition.
Parameters:  Sequence Page
       aHspinal - amplitude of the dec channel.
       pwHspinal - approximate 180-degree flip angle on resonance.
       phHspinal - +/- small angle phase. SPINAL64 is implemented
              with phases = +/- 1.0, +/- 1.5 and +/-2.0 times
              phHspinal.
       chHspinal = 'dec' must be set (not shown).
Implementation: SPINAL dec = getspinal("H"); or DSEQ dec =
              getdseq("H");
Underscore functions: _spinal(dec); and decprgoff(); or
             _dseqon(dec); and _dseqoff(dec);

Htppm:  Module:  yes
Sequence:  tancpx.c
Description:  Implements TPPM decoupling on the dec channel during
              acquisition.
Parameters:  Sequence Page
       aHtppm - amplitude of the dec channel.
       pwHtppm - approximate 180-degree flip angle on resonance.
       phHtppm - +/- small angle phase. TPPM is implemented
              with phases = +/- 1.0 times phHtppm for alternating
              pulses.
       chHtppm = 'dec' must be set (not shown).
Implementation: TPPM dec = gettppm("H"); or DSEQ dec = getdseq("H");
Underscore functions: _tppmon(dec); and decprgoff(); or _dseqon(dec);
              and _dseqoff(dec);

