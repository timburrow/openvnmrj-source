# 
# Copyright (c) 1991-2004 Varian, Inc. All Rights Reserved. 
# This software contains proprietary and confidential
# information of Varian, Inc. and its contributors.
# Use, disclosure and reproduction is prohibited without
# prior consent.
#
###########################################################
#							  #
#    makeuserpsg   -   UNIX makefile for creating a new   #
#		       user PSG library			  #
#							  #
#    This is the MERCURY version			  #
#							  #
###########################################################


MAKEFILE= makeuserpsg

#-----  do not let these libraries get deleted
.PRECIOUS= libpsglib.a

#-----  The system and user PSG directories
PSG_DIR= $(vnmrsystem)/psg/
LIB_DIR= $(vnmrsystem)/lib/
USR_PSG_DIR= $(vnmruser)/psg/

#-----  Normal operational compile flags
CFLAGS= -O -DG2000
CPPFLAGS= -I$(GCC_EXEC_PREFIX)include -DSUN -DULONG -DPSG_LC
LDFLAGS=
TARGET_ARCH=
RF_ARCH=
COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(RF_ARCH) -c
LINK.c= $(CC) $(CFLAGS) $(LDFLAGS) $(TARGET_ARCH) $(RF_ARCH)

#-----  Link commands for needed sources and makefile
PSG_LN= ln -s $(PSG_DIR)$(@)
REV_ID=1.0

#------------------------------------------------------------------------
#-----  PSG sources files 
#------------------------------------------------------------------------

PSG_SRC=			\
                abort.c         \
                active.c        \
		apshape_pulse.c	\
		aptable.c	\
		array.c		\
		autofuncs.c	\
		convert.c	\
		eventoverhead.c	\
		freq_list.c	\
                getparm.c       \
		gradient.c	\
		hash.c		\
		hwlooping.c	\
		initauto.c	\
		initHSlines.c	\
		lc_hdl.c	\
		lc_index.c	\
		looping.c	\
		meat.c		\
                P_receive.c     \
		pre_fid_seq.c	\
		raparms.c	\
                sendasync.c     \
                setparm.c       \
		signalhandler.c	\
                stubs.c         \
		treefuncs.c	\
		wetfuncs.c	\
		wg.c		\
		xmath.c		\
		xmtr.c

DPS_DUMMY_SRC=			\
                x_ps.c

DPS_DUMMY_OBJ= $(DPS_DUMMY_SRC:.c=.o)

PSG_OBJ= $(PSG_SRC:.c=.o)

#-----  Acqproc header files that are needed
PSG_HDR=			\
		abort.h		\
		acodes.h	\
		acqparms2.h	\
		apdelay.h	\
		aptable.h	\
		asm.h		\
		data.h		\
		dpsdef.h	\
		dsp.h		\
		expDoneCodes.h	\
		group.h		\
		lc_gem.h	\
		lc_index.h	\
		mfileObj.h	\
		params.h	\
		pvars.h		\
		PboxM_psg.h	\
		Pbox_psg.h	\
		REV_NUMS.h	\
		rfconst.h	\
		shims.h		\
		shrexpinfo.h	\
		standard.h	\
		symtab.h	\
		variables.h	\
		vfilesys.h	\
		vnmrsys.h	\
		wetfuncs.h

#----- PSG sources that require conditional compilation
CND_PSG_SRC=			\
                psg.c           

CND_PSG_OBJ= $(CND_PSG_SRC:.c=.o)


#-----  All sources and headers are required for compilation
ALLSRC=	$(PSG_SRC) $(PSG_HDR) $(CND_PSG_SRC) $(DPS_DUMMY_SRC)
LIBS=	-lm


#------------------------------------------------------------------------
#-----  Targets
#------------------------------------------------------------------------

lib : Source
	@echo Creating PSG Library for SunOS...
	@echo
	@echo
	$(MAKE) -fes $(MAKEFILE) "PSGLIB=libpsglib.a" \
	"TARGET_ARCH=-Dsun4 -D`mach`" \
	libpsglib.a libpsglib.so
	@echo
	@echo
	@echo PSG Library Complete.

#  libpsglib.so removed as a Target for Solaris for the interum...
#  the -w in CFLAGS will inhibit warning messages produced by GNU C

libsol : Source
	echo Creating PSG Libraries for MERCURY;			\
	echo;							\
	echo;							\
	rm -f libpsglib.so;					\
	( SOLARIS="y"; export SOLARIS; $(MAKE) -fes $(MAKEFILE)	\
	 "PSGLIB=libpsglib.a"					\
	 "CFLAGS= -O -w -DG2000 -DMERCURY"			\
	 "TARGET_ARCH=-DSOLARIS"				\
	  libpsglib.a libpsglib.so  )
	echo
	echo
	echo PSG Libraries for MERCURY Complete.

fixlibsol :
	@echo Creating PSG Library for MERCURY ...
	@echo
	( SOLARIS="y"; export SOLARIS;				\
	  rm -f libpsglib.so;					\
	  $(MAKE) -fes $(MAKEFILE)				\
	 "PSGLIB=libpsglib.a"					\
	 "CFLAGS= -O -fPIC -DULONG -DG2000 -DMERCURY -w -I$(GCC_EXEC_PREFIX)include "	\
	 "TARGET_ARCH=-DSOLARIS"				\
	 "REV_ID=6.0"						\
	  libpsglib.a libpsglib.so )
	@echo
	@echo PSG Libraries for MERCURY Complete.

#------------------------------------------------------------------------
#-----  Recursive Targets
#------------------------------------------------------------------------
Source :
	@echo
	@echo
	@echo Creating additional source links...
	( cd $(USR_PSG_DIR); $(MAKE) -fes $(MAKEFILE) src )

src :	$$(MAKEFILE) $(ALLSRC)

libpsglib.a : getobj $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f $@)
	(umask 2; ar r $@ `lorder $(PSG_OBJ) $(CND_PSG_OBJ) \
			          | tsort 2> /dev/null` 2> /dev/null )
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		 echo ranlib $@; 			\
		 ranlib $@; 				\
	 fi)
	-@ (umask 2; if [ x$$SOLARIS != "xy" ]; then		\
		echo remove objects;				\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ);		\
	 fi)

libpsglib.so :
	(umask 2;					\
	ld -G -o $@.$(REV_ID) $(PSG_OBJ) $(CND_PSG_OBJ) ;	\
	rm -f $@;					\
	ln -s $@.$(REV_ID) $@;)

getobj :
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then		\
	    if [ -f $(PSGLIB) ]; then				\
	        ar xo $(PSGLIB) $(PSG_OBJ) $(CND_PSG_OBJ) ;	\
	    fi;							\
	 fi)

#------------------------------------------------------------------------
#-----  Object dependencies
#------------------------------------------------------------------------

abort.o : $(@:.o=.c)		\
		group.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

active.o : $(@:.o=.c)		\
		variables.h	\
		group.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

apshape_pulse.o : $(@:.o=.c)		\
		acodes.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

aptable.o : $(@:.o=.c)		\
		acodes.h	\
		aptable.h	\
		group.h		\
		symtab.h	\
		variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

array.o : $(@:.o=.c)		\
		lc_gem.h	\
		group.h		\
		shims.h		\
		variables.h	\
		acqparms2.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

autofuncs.o : $(@:.o=.c)	\
		group.h		\
		acodes.h	\
		rfconst.h	\
		acqparms2.h	\
		shims.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

convert.o : $(@:.o=.c)		\
		REV_NUMS.h	\
		acodes.h	\
		group.h		\
		acqparms2.h	\
		abort.h		\
		aptable.h	\
		expDoneCodes.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

eventoverhead.o: $(@:.o=.c)	\
		apdelay.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

freq_list.o : $(@:.o=.c)	\
		vnmrsys.h	\
		acqparms2.h	\
		lc_gem.h	\
		acodes.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

getparm.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

gradient.o : $(@:.o=.c)		\
		acodes.h	\
		acqparms2.h	\
		abort.h		\
		group.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )
		
hash.o : $(@:.o=.c)             \
		acqparms2.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

hwlooping.o : $(@:.o=.c)	\
		acodes.h	\
		dsp.h		\
		rfconst.h	\
		acqparms2.h	\
		lc_gem.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

initauto.o : $(@:.o=.c)         \
		acodes.h	\
		rfconst.h	\
		acqparms2.h	\
		group.h		\
		shims.h	
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

initHSlines.o : $(@:.o=.c)      \
		acodes.h	\
		rfconst.h	\
		group.h		\
		acqparms2.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

lc_hdl.o : $(@:.o=.c)           \
		lc_gem.h	\
		acodes.h	\
		lc_index.h	\
		group.h		\
		abort.h		\
		shrexpinfo.h	\
		variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

lc_index.o : $(@:.o=.c)         \
		lc_index.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

looping.o : $(@:.o=.c)          \
		acodes.h	\
		rfconst.h	\
		acqparms2.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

meat.o : $(@:.o=.c)             \
		lc_gem.h	\
		params.h	\
		group.h		\
		abort.h		\
		variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

P_receive.o : $(@:.o=.c)		\
		group.h		\
		symtab.h	\
		variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

psg.o : $(@:.o=.c)		\
		abort.h		\
		asm.h		\
		data.h		\
		group.h		\
		lc_gem.h	\
		lc_index.h	\
		pvars.h		\
		shrexpinfo.h	\
		variables.h
	(umask 2; $(COMPILE.c) -DPSG_LC $(@:.o=.c) )

raparms.o : $(@:.o=.c)          \
		acqparms2.h	\
		data.h		\
		lc_gem.h	\
		mfileObj.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

sendasync.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

setparm.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

signalhandler.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

stubs.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

treefuncs.o : $(@:.o=.c)        \
		group.h         \
		params.h	\
		symtab.h        \
		variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

wetfuncs.o : $(@:.o=.c)         \
		rfconst.h	\
		acqparms2.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

wg.o : $(@:.o=.c)		\
	acodes.h		\
	acqparms2.h		\
	rfconst.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

xmath.o : $(@:.o=.c)		\
	acqparms2.h		\
	dpsdef.h		\
	group.h			\
	lc_gem.h		\
	Pbox_psg.h		\
	REV_NUMS.h		\
	variables.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

xmtr.o : $(@:.o=.c)		\
	rfconst.h
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

x_ps.o : $(@:.o=.c)
	(umask 2; $(COMPILE.c) $(@:.o=.c) )

#------------------------------------------------------------------------
#-----  Source extraction via soft links
#------------------------------------------------------------------------

$(PSG_SRC) $(PSG_HDR) $(CND_PSG_SRC) : $$(PSG_DIR)$$(@)
	$(PSG_LN) $@

$(DPS_DUMMY_SRC) : $$(PSG_DIR)$$(@)
	$(PSG_LN) $@
