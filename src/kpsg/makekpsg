#
# Varian, Inc. All Rights Reserved.
# This software contains proprietary and confidential
# information of Varian, Inc. and its contributors.
# Use, disclosure and reproduction is prohibited without
# prior consent.
#
#
# psg libraries make file
#
# NOTE: dramatic changes for SUN3 and SUN4 usage...
#
# make -f makepsg,  creates libparam.a libpsglib.a and s2pul for PAID 
# make -f makepsg userp,  Gets released psg sources from SCCS into current directory
#   now defunct target is micro 
# make -f makepsg dbx,  creates dbxtool version of libraries & s2pul for PAID 
# make -f makepsg prof,  creates gprof profiling version of libraries & s2pul for PAID 
# make -f makepsg lib,  creates libraries for PAID 
#
# make -f makepsg stdalone,  creates  standalone dbx psg, psg expects to files in
#			     the current directory 
#			     1. "curpar" parameter file
#			     2. "conparplus" parameter file 
#			         generated by "cat conpar global > conparplus"
#  
#
# ----->  dbx or profiling libraries are not standard release items and are
#	  NOT to be given to customers....    9/22/87  Greg Brissey
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#  NOTE: Improved makefile, dbx or profiling DO NOT require their own directory
#	 to compile properly, remove the dbx and profile sub-directories
#	 objects are hidden within the library files not directories now.
#
#	 The seperate object list for PAID and VIS are not necessary now
#	 but they were kept to list objects that are different to aid
#	 possible debugging.
#
#        To use the dbx or profile libraries use the vnmr macros
#	  seqgendbx('pulse_sequence') and seqgenprof('pulse_sequence') 
#	  respectivily.
#	  Note: these macros are not included in /vnmr/maclib, they must be
#	        placed in your own private maclib.
#
#	 Macros require latest makepsg file in /vnmr/acqbin,
#	  dbx and profile libraries must be present in /vnmr/psg !
#

# ----- sccs  & vnmr home dir, environment variables sccsdir,vnmrdir ----

MAKEFILE= makekpsg

#----  don't let make delete this libraries ------
.PRECIOUS= libpsglib.a libpsglib_dbx.a libpsglib_p.a \
	  libparam.a libparam_dbx.a libparam_p.a 	\
	  llib-lpsg.ln

# solobjdir sourcedir, sccsdir & vnmrdir are environment variables
# sccsdir -> SCCS directory 
# vnmrdir -> vnmr directory 
# solobjdir -> /vobj/sol
 
SOLOBJDIR=$(solobjdir)
SRCDIR=$(sourcedir)
SCCSDIR=$(sccsdir)
VNMRDIR=$(vnmrdir)

# Shared Library version number   E.G.  3.2 -> libparam.so.3.2,libpsglib.so.3.2
SHAREDLIB_VER=$(psg_so_ver)


#------  The Real Sources for object are contained in one directory --
# for testing it is '../' normally it would be a absolute path..
SRC_DIR=$(SRCDIR)/syskpsg/

#-----  Project Category Under the SCCS directory --------
# sccsdir -> SCCS directory  (e.g., /big/sccs )
# PROJCAT= vnmr/  -> directory under SCCS directory  (e.g., /big/sccs/vnmr/ )
PROJCAT=

#-- Normal operational compile flags
CFLAGS= -O -DPSG_LC -DULONG -DG2000 -DMERCURY
CPPFLAGS= -DSUN -DG2000 -DMERCURY
LDFLAGS=
LDSOFLAGS=
TARGET_ARCH=
COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) $(RF_ARCH) -c
#COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.c= $(CC) $(CFLAGS) $(LDFLAGS) $(TARGET_ARCH)

VNMR_SRC_DIR= $(SRC_DIR)
XRACQ_SRC_DIR= $(SRC_DIR)
GAPMON_SRC_DIR= $(SRC_DIR)
PSG_SRC_DIR= $(SRC_DIR)
PSGSEQ_SRC_DIR= $(SRC_DIR)
SCRIPT_SRC_DIR= $(SRC_DIR)
GEM_SRC_DIR= $(SRC_DIR)
EXPPROC_SRC_DIR=$(SRC_DIR)
KPSG_SRC_DIR=$(SRC_DIR)
NCOMM_SRC_DIR= $(SRC_DIR)

#--- SCCS Sources ----
PSGSEQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)gpsg/SCCS/s.
VNMR_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vnmr/SCCS/s.
XRACQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)xracq/SCCS/s.
GAPMON_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)gapmon/SCCS/s.
PSG_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)psg/SCCS/s.
SCRIPT_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)scripts/SCCS/s.
GEM_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)gpsg/SCCS/s.
EXPPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)expproc/SCCS/s.
KPSG_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)kpsg/SCCS/s.
NCOMM_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)ncomm/SCCS/s.

#----  PSG Library being updated -----
PSGLIB= libpsglib.a

#--- Link Commands for Sources Needed. -------
PSGSEQ_LN = ln -s $(PSGSEQ_SRC_DIR)$(@)
VNMR_LN = ln -s $(VNMR_SRC_DIR)$(@)
XRACQ_LN = ln -s $(XRACQ_SRC_DIR)$(@)
GAPMON_LN = ln -s $(GAPMON_SRC_DIR)$(@)
PSG_LN = ln -s $(PSG_SRC_DIR)$(@)
SCRIPT_LN = ln -s $(SCRIPT_SRC_DIR)$(@)
GEM_LN = ln -s $(GEM_SRC_DIR)$(@)
EXPPROC_LN = ln -s $(EXPPROC_SRC_DIR)$(@)
KPSG_LN = ln -s $(KPSG_SRC_DIR)$(@)
NCOMM_LN = ln -s $(NCOMM_SRC_DIR)$(@)

#---  SCCS Extraction Commands for Sources Needed.  -------
PSGSEQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)gpsg/SCCS get
VNMR_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vnmr/SCCS get
XRACQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)xracq/SCCS get
GAPMON_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)gapmon/SCCS get
PSG_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)psg/SCCS get
SCRIPT_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)scripts/SCCS get
GEM_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)/gpsg/SCCS get
EXPPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)/expproc/SCCS get
KPSG_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)/kpsg/SCCS get
NCOMM_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)ncomm/SCCS get

#----  default source extraction to links -------
PSGSEQ_GET= $(PSGSEQ_LN)
VNMR_GET= $(VNMR_LN)
XRACQ_GET= $(XRACQ_LN)
GAPMON_GET= $(GAPMON_LN)
PSG_GET= $(PSG_LN)
SCRIPT_GET= $(SCRIPT_LN)
GEM_GET= $(GEM_LN)
EXPPROC_GET= $(EXPPROC_LN)
KPSG_GET= $(KPSG_LN)
NCOMM_GET= $(NCOMM_LN)
#------------------------------------------------------------------------
#--- VNMR sources that are needed for PSG
#------------------------------------------------------------------------
EMPTY_SRC=

VNMR_SRC=                       \
		asmfuncs.c	\
                assign.c	\
                allocate.c      \
                pvars.c         \
		shims.c		\
                symtab.c        \
                tools.c         \
                vfilesys.c         \
                variables1.c

SHORT_VNMR_SRC=                 \
                assign.c	\
                allocate.c      \
                pvars.c         \
                symtab.c        \
                tools.c         \
                vfilesys.c         \
                variables1.c

VNMR_OBJ= $(VNMR_SRC:.c=.o)

#--- VNMR header files that are needed for PSG
VNMR_HDR=			\
		allocate.h	\
		asm.h		\
		data.h		\
		dpsdef.h	\
		graphics.h	\
		group.h		\
		init.h		\
		params.h	\
		pvars.h		\
		shims.h		\
		symtab.h	\
		tools.h		\
		variables.h	\
		vfilesys.h	\
		wjunk.h

#------------------------------------------------------------------------
#-- common PSG sources files 
#------------------------------------------------------------------------
PSG_SRC=			\
                abort.c         \
                active.c        \
                getparm.c       \
		hash.c		\
		lc_index.c	\
                P_receive.c     \
                setparm.c       \
		signalhandler.c	\
                stubs.c         \
		treefuncs.c	\
		xmath.c		\
		x_ps.c

PSG_OBJ= $(PSG_SRC:.c=.o)

SHORT_PSG_SRC=                  \
		hash.c          \
                P_receive.c     \
		treefuncs.c

SPEC_PSG_SRC=

SPEC_PSG_OBJ= $(SPEC_PSG_SRC:.c=.o)

#----- PSG header files that are needed
PSG_HDR=			\
		abort.h		\
		dsp.h		\
		Pbox_psg.h	\
		vnmrsys.h

# PSG_P_HDR=

#------- Expproc header files that are needed
EXPPROC_HDR=			\
		expDoneCodes.h	\
		shrexpinfo.h

#----- PSG source that require conditional compilation  ----
# CND_PSG_SRC=

# CND_PSG_OBJ= $(CND_PSG_SRC:.c=.o)

# files and headers unique to GeminiPLUS

GEM_PSG_SRC=			\
		gradient.c	\
		sendasync.c

GEM_PSG_OBJ= $(GEM_PSG_SRC:.c=.o)


GEM_PSG_HDR=			\
		rfconst.h

GAPMON_HDR=	lc_gem.h	\
		acodes.h

# files and headers unique to Mercury

KPSG_SRC=			\
		aptable.c	\
		apshape_pulse.c	\
		array.c		\
		autofuncs.c	\
		convert.c	\
		eventoverhead.c	\
		freq_list.c	\
		looping.c	\
		hwlooping.c	\
		initHSlines.c	\
		initauto.c	\
		lc_hdl.c	\
		meat.c		\
		pre_fid_seq.c	\
                psg.c		\
		raparms.c	\
		wetfuncs.c	\
		wg.c		\
		xmtr.c


KPSG_OBJ= $(KPSG_SRC:.c=.o)

KPSG_HDR=			\
		acqparms2.h	\
		apdelay.h	\
		aptable.h	\
		lc_index.h	\
		PboxM_psg.h	\
		REV_NUMS.h	\
		standard.h	\
		wetfuncs.h

#---------------------------------------------------------------------
#   psg source code that can be included in Users Pulse Sequences
#   i.e. C header files 
#---------------------------------------------------------------------
PSG_HDR_C=

# Communications libraries
NCOMM_HDR=                      \
                mfileObj.h

#----- xracq header files that are needed
XRACQ_HDR=

#----- PSG source files that are needed
PSGSEQ_SRC=			\
		s2pul.c

PSGSEQ_OBJ= $(PSGSEQ_SRC:.c=.o)

#----- PSG SEQUENCE header files that are needed
PSGSEQ_HDR=

#---- Vnmr Headers Needed for User Programming
USR_VNMR_HDR=			\
		asm.h		\
		data.h		\
		dpsdef.h	\
		group.h		\
		params.h	\
		pvars.h		\
		shims.h		\
		symtab.h	\
		variables.h

#---- PSG Sources Needed for User Programming but not used in psglib.
USR_PSG_SRC=

LINTLIB_SRC=			\
		lintfile.c

#---- seqgen utilities needed -------------------------
SEQGEN_MAKE=			\
		seqgenmake

SEQGEN_UTIL=			\
		xseqpreen.sh	\
		booleanpreen.sh	\
		seqgen.sh

#---- All Sources and headers required for compilation -----
ALLSRC= $(VNMR_SRC) $(VNMR_HDR) $(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C)	\
	$(XRACQ_HDR) $(CND_PSG_SRC)					\
	$(PSGSEQ_SRC) $(PSGSEQ_HDR) $(LINTLIB_SRC)			\
	$(SEQGEN_MAKE) $(SEQGEN_UTIL)					\
	$(GEM_PSG_SRC) $(GEM_PSG_HDR) $(GAPMON_HDR)			\
	$(EXPPROC_HDR) $(KPSG_SRC) $(KPSG_HDR)				\
	$(NCOMM_HDR) makeuserpsg

ALL_C_SRC= $(VNMR_SRC) $(PSG_SRC)  $(PSG_HDR_C)  $(CND_PSG_SRC) \
	$(PSGSEQ_SRC) $(LINTLIB_SRC) $(SHORT_PSG_SRC)	\
	$(GEM_PSG_SRC) $(KPSG_SRC)

USERPSRC= $(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C) $(USR_PSG_SRC) $(USR_VNMR_HDR) \
	  $(XRACQ_HDR) $(CND_PSG_SRC) $(GEM_PSG_SRC) $(GEM_PSG_HDR)         \
	  $(KPSG_SRC) $(KPSG_HDR) $(GAPMON_HDR) $(LINTLIB_SRC) 		    \
	  $(EXPPROC_HDR) $(NCOMM_HDR) makeuserpsg

# excludes s2pul.o

ALLOBJS= $(PSG_OBJ) $(SPEC_PSG_OBJ) $(CND_PSG_OBJ) $(VNMR_OBJ) \
	 $(GEM_PSG_OBJ) $(KPSG_OBJ)



LINTFILES= $(ALLSRC:.c=.ln)
LIBS= -lm

#---- Targets ------------------------------------
std : $$(MAKEFILE) Source 
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib.a" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PARMLIB= libparam.a"  s2pul so_libs seqgen xseqpreen booleanpreen lintlib
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

lib : Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib.a" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PARMLIB= libparam.a" \
	libparam.a libpsglib.a
	@echo "NMR_ID PSG lib complete -------------------------------------"

dbx : Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -g -Bstatic -DDBXTOOL -DDEBUG" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_dbx.a /vobj/sol/lib/libncomm.a"	\
	"PARMLIB= libparam_dbx.a" \
	 s2puldbx
	@echo "NMR_ID dbx PSG complete -------------------------------------"

AIX:
	$(MAKE) -e -f $(MAKEFILE)  \
	"TARGET_ARCH=-DAIX" \
	"PSG_SRC=$(SHORT_PSG_SRC)" \
	"VNMR_SRC=$(SHORT_VNMR_SRC)" \
	"CND_PSG_SRC=" \
	"LINTLIB_SRC=" \
	"USR_PSG_SRC=" \
	Source src AIX_PSG
	mv libpsglib_ibm.a libpsglib.a
	mv libparam_ibm.a libparam.a
	@echo "NMR_ID PSG Source complete ---------------------"
	
AIX_PSG :
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib_ibm.a" \
	"TARGET_ARCH=-DAIX" \
	"CFLAGS= -O -DAIX"	\
	"CPPFLAGS= "	\
	"CND_PSG_SRC=" \
	"LINTLIB_SRC=" \
	"USR_PSG_SRC=" \
	"PARMLIB= libparam_ibm.a"  s2pul seqgen xseqpreen booleanpreen
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

IRIX:
	$(MAKE) -e -f $(MAKEFILE)  \
	"TARGET_ARCH=-DIRIX" \
	"PSG_SRC=$(SHORT_PSG_SRC)" \
	"VNMR_SRC=$(SHORT_VNMR_SRC)" \
	"CND_PSG_SRC=" \
	"LINTLIB_SRC=" \
	"USR_PSG_SRC=" \
	Source src IRIX_PSG
	mv libpsglib_sgi.a libpsglib.a
	mv libparam_sgi.a libparam.a
	@echo "NMR_ID PSG Source complete ---------------------"
	
IRIX_PSG :
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "PSGLIB= libpsglib_sgi.a" \
	"TARGET_ARCH=-DIRIX" \
	"CFLAGS= -O -DIRIX -cckr"	\
	"CPPFLAGS= "	\
	"CND_PSG_SRC=" \
	"LINTLIB_SRC=" \
	"USR_PSG_SRC=" \
	"PARMLIB= libparam_sgi.a"  s2pul seqgen xseqpreen booleanpreen
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

SOLARIS : $$(MAKEFILE) Source 
	rm -f s2pul.o
	( SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	  "PSGLIB= libpsglib.a" \
	  "PARMLIB= libparam.a"	\
	  "CPPFLAGS= -I$(GCC_EXEC_PREFIX)include -DSUN -DSOLARIS"	\
	  "LDSOFLAGS= -G -V"	\
	  "LIBS= -lacqcomm -lm -lsocket -lnsl"	\
	   lib so_libs seqgen xseqpreen booleanpreen s2pul )
	@echo "NMR_ID PSG libs and Shared libs complete ---------------------"

#------------------------------------------------------------------------------

solstdalone : $$(MAKEFILE) Source
	rm -f s2pul.o
	( SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	  "PSGLIB= libpsglib.a" \
	  "PARMLIB= libparam.a" \
	  "CFLAGS= -g -xF -xsb -DPSG_LC -DULONG -DDEBUG -DTESTING" \
	  "CPPFLAGS= -DG2000 -DMERCURY -DSUN -DSOLARIS"   \
	  "LDSOFLAGS= -G"       \
	  "LDFLAGS = -R/vobj/sol/lib" \
	  "LIBS= /vobj/sol/lib/libacqcomm.a -lm -lsocket -lnsl" \
	     "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)"   \
	     "PSGSEQ_SRC_DIR= $(PSGSEQ_SCCS_SRC)" \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"  \
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)" \
	     "SCRIPT_SRC_DIR= $(SCRIPT_SCCS_SRC)" \
	     "VNMR_GET= $(VNMR_SGET)" "PSGSEQ_GET= $(PSGSEQ_SGET)" \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)"  \
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"  \
	     "EXPPROC_GET= $(EXPPROC_SGET)"     \
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"  \
	     "NCOMM_GET= $(NCOMM_SGET)" \
	     "SCRIPT_GET= $(SCRIPT_SGET)"       \
	   psgdbx )
	@echo Standalone  PSG complete
	@echo Do not forget to have curpar and conparplus
	@echo  in the directory prior to running psgdbx


stdalone : Source
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -g -L/vobj/sol/lib -DDBXTOOL -DDEBUG -DTESTING" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_dbx.a"	\
	"PARMLIB= libparam_dbx.a"	\
        "LDSOFLAGS= -G -V"              \
        "LIBS= -lacqcomm -lm -lsocket -lnsl"      \
	 psgdbx
	@echo Standalone  PSG complete
	@echo Do not forget to have curpar and conparplus
	@echo  in the directory prior to running psgdbx

swtunekrikkit : Source
	(SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
	"CPPFLAGS= -DSWTUNE -DSUN -DG2000 -DSOLARIS" \
	"CFLAGS= -O -DPSG_LC -DULONG -DG2000 -DMERCURY" \
	"PSGLIB= libpsglib_tune.a"	\
	"PARMLIB= libparam_tune.a" \
	"LIBS= -lm -lsocket -lnsl"	\
	 psgtune )

prof: Source
	rm -f s2pul.o
	$(MAKE) -e -f $(MAKEFILE) "CFLAGS= -O -pg -DPROFILE" \
	"TARGET_ARCH=-D`arch` -D`mach`" \
	"PSGLIB= libpsglib_p.a"	\
	"PARMLIB= libparam_p.a" \
	 s2pulprof
	@echo NMR_ID profiling PSG complete

lintlib :  lintfile.c
	lint -a -n -u -v -x -DLINT -opsg lintfile.c

fpa:
	@echo "NMR_ID PSG fpa not supported ---------------------------------"

#  First grep command isolates and lists all the included files
#   and the files that include them.
#  Next to last awk command removes system include files from the list of dependencies
#  The sort command alphabetizes the list of targets and their dependencies, serving
#   to collect each target and its dependencies.
#  Last awk command inserts a blank line between each distinct target.  This is
#   REQUIRED on Solaris, else the make program there "gives up" after a while,
#   failing to recognize the dependencies listed in the file

depend:	$$(MAKEFILE) Source src
	@ echo making dependencies...
	@ grep '^#include' $(ALL_C_SRC) $(PSG_P_HDR)\
		| sed 's/<\([^>]*\)>/"\/usr\/include\/\1"/' \
		| sed 's/:[^"]*"\([^"]*\)".*/: \1/' \
		| sed 's/\.c/.o/' \
                | sed 's/\.y/.o/' \
                | sed 's/\.l/.o/' >makedepd
	@ ls -1 $(ALL_C_SRC) | awk "{ {len = length(\$$0)} {s2 = substr(\$$0, 1, len - 2)} {print s2 \".o: \", \$$0 >> \"makedepd\"} } "
	@ awk "{ if ( \$$2 !~ /\/usr\// ) { print \$$0; } }" makedepd | sort > makedep2
	@ awk 'BEGIN { prev_field_1 = "" } 				\
	             { if ( $$1 != prev_field_1 ) printf( "\n" );	\
		       prev_field_1 = $$1; print }'			\
		<makedep2 >makedep
	@ echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	@ echo '$$r makedep' >>eddep
	@ echo 'w' >>eddep
	@ cp $(MAKEFILE) $(MAKEFILE).bak
	@ ed - $(MAKEFILE) < eddep
	@ rm -f eddep makedep makedep2 makedepd
	@ echo '# DEPENDENCIES MUST END AT END OF FILE' >> $(MAKEFILE)
	@ echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> $(MAKEFILE)
	@ echo '# see make depend above' >> $(MAKEFILE)

#-----  Recursive Targets ----------------------------------------------------
s2pul s2puldbx s2pulprof:  $(PARMLIB) $(PSGLIB) $(PSGSEQ_OBJ) 
	(umask 2; $(LINK.c) -o $@ -L$(SOLOBJDIR)/proglib/ncomm  $(PSGSEQ_OBJ) $(PSGLIB) $(PARMLIB) $(PSGLIB) $(LIBS)  )

s2pulv s2puldbxv s2pulprofv:  $(PARMLIB) $(PSGLIB) $(PSGSEQ_OBJ) 
	(umask 2; $(LINK.c) -o $@ $(PSGSEQ_OBJ) $(PSGLIB) $(PARMLIB) $(LIBS)  )

#-----  standalone version of psg, requires a curpar and conparplus parameter files
#----   conparplus = "cat conpar global > conparplus"
psgdbx: $(PSGSEQ_OBJ) $(PSG_OBJ) $(CND_PSG_OBJ) $(VNMR_OBJ) $(GEM_PSG_OBJ) \
	 $(KPSG_OBJ)
	(umask 2; $(LINK.c) -o $@ $(PSGSEQ_OBJ) $(PSG_OBJ) $(CND_PSG_OBJ) $(VNMR_OBJ) $(GEM_PSG_OBJ) $(KPSG_OBJ) $(LIBS)  )

psgtune: $(PARMLIB) $(PSGLIB) $(DPS_DUMMY_OBJ)
	echo PARMLIB = $(PARMLIB)

Source :
	( cd $(SRC_DIR); $(MAKE) -e -f $(MAKEFILE)	\
	     "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)"		\
	     "PSGSEQ_SRC_DIR= $(PSGSEQ_SCCS_SRC)"	\
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"		\
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)"		\
	     "SCRIPT_SRC_DIR= $(SCRIPT_SCCS_SRC)"	\
	     "GEM_SRC_DIR= $(GEM_SCCS_SRC)"		\
	     "GAPMON_SRC_DIR= $(GAPMON_SCCS_SRC)"	\
	     "KPSG_SRC_DIR= $(KPSG_SCCS_SRC)"	\
	     "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"	\
	     "VNMR_GET= $(VNMR_SGET)" "PSGSEQ_GET= $(PSGSEQ_SGET)" \
	     "XRACQ_GET= $(XRACQ_SGET)" "PSG_GET= $(PSG_SGET)"     \
	     "SCRIPT_GET= $(SCRIPT_SGET)"			   \
	     "EXPPROC_GET= $(EXPPROC_SGET)"			   \
	     "GEM_GET= $(GEM_SGET)" 				   \
	     "GAPMON_GET= $(GAPMON_SGET)" 			   \
             "KPSG_GET= $(KPSG_SGET)"                              \
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"			   \
             "NCOMM_GET= $(NCOMM_SGET)" 			   \
	   src)

src : $$(MAKEFILE) $(ALLSRC)
	@echo Sources up to date...

userp :
	( $(MAKE) -e -f $(sourcedir)/syskpsg/$(MAKEFILE) \
	     "XRACQ_SRC_DIR= $(XRACQ_SCCS_SRC)"		\
	     "PSG_SRC_DIR= $(PSG_SCCS_SRC)"		\
	     "XRACQ_GET= $(XRACQ_SGET)"			\
	     "PSG_GET= $(PSG_SGET)" 			\
             "VNMR_GET= $(VNMR_SGET)"			\
             "GEM_GET= $(GEM_SGET)"			\
	     "GAPMON_GET= $(GAPMON_SGET)"		\
	     "EXPPROC_GET= $(EXPPROC_SGET)"		\
             "KPSG_GET= $(KPSG_SGET)"			\
	     "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"		\
	     "NCOMM_GET= $(NCOMM_SGET)"			\
	     userpsrc)

userpsrc : $(USERPSRC)
	@echo Sources up to date...

#libparam.a libparam_p.a libparam_dbx.a : getobjp $(VNMR_OBJ)
libparam.a libparam_p.a libparam_dbx.a libparam_tune.a : getobjp $(VNMR_OBJ)
	- (umask 2; rm -f $@)
	(umask 2; ar rv $@ `lorder $(VNMR_OBJ) | tsort` )
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		 echo ranlib $@; 			\
		 ranlib $@; 				\
	  fi)
	-@ (umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo remove objects;			\
		rm -f $(VNMR_OBJ);			\
	    fi)

libparam_ibm.a : $(VNMR_OBJ) 
	- (umask 2; rm -f $@)
	(umask 2; ar rv $@  $(VNMR_OBJ))
	(umask 2; ranlib $@ )
	@echo libparam.a is done 

libparam_sgi.a : $(VNMR_OBJ) 
	- (umask 2; rm -f $@)
	(umask 2; ar rsv $@  $(VNMR_OBJ))
	@echo libparam.a is done 

libparam.so : $($@:.so=.a)
	- (umask 2; rm -f $@.*)
	(umask 2 ; ld $(LDSOFLAGS) -o $@.$(SHAREDLIB_VER) $(VNMR_OBJ); 	\
		  rm -f $(VNMR_OBJ))

libpsglib.so : $($@:.so=.a)
	- (umask 2; rm -f $@.*)
	(umask 2; ld $(LDSOFLAGS) -o $@.$(SHAREDLIB_VER) $(PSG_OBJ) $(CND_PSG_OBJ); \
	  rm -f $(PSG_OBJ) $(CND_PSG_OBJ) )

libpsglib.a libpsglib_p.a libpsglib_dbx.a libpsglib_tune.a : getobj $(PSG_OBJ)	\
		$(CND_PSG_OBJ) $(GEM_PSG_OBJ) $(GEM_PSG_HDR) 	\
		$(KPSG_OBJ) $(KPSG_HDR)
	- (umask 2; rm -f $@)
	(umask 2; ar rv $@ `lorder $(PSG_OBJ) $(CND_PSG_OBJ) $(GEM_PSG_OBJ) \
			    $(KPSG_OBJ) | tsort` )
	@(umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo ranlib $@;				\
		ranlib $@;				\
	  fi)
	-@ (umask 2; if [ x$$SOLARIS != "xy" ]; then	\
		echo remove objects;			\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ);	\
	    fi)

libpsglib_ibm.a : $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f $@)
	(umask 2; ar rv $@ `lorder $(PSG_OBJ) $(CND_PSG_OBJ) \
			          | tsort` )
	(umask 2; ranlib $@ )
	mv libpsglib_ibm.a libpsglib_ibm.a

libpsglib_sgi.a : $(PSG_OBJ) $(CND_PSG_OBJ)
	- (umask 2; rm -f $@)
	(umask 2; ar rsv $@  $(PSG_OBJ) $(CND_PSG_OBJ) )

so_libs :
	- (umask 2; rm libparam.so*; rm libpsglib.so*)
	- (umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		ar x libparam.a $(VNMR_OBJ); fi;			\
	echo "makeing libparam.so";					\
 	ld $(LDSOFLAGS) -o libparam.so.$(SHAREDLIB_VER) $(VNMR_OBJ);	\
	ln -s libparam.so.$(SHAREDLIB_VER) libparam.so ;		\
	if [ x$$SOLARIS != "xy" ]; then rm -f $(VNMR_OBJ); fi;		\
	rm -f libpsglib.so.* ;						\
	if [ x$$SOLARIS != "xy" ]; then ar x libpsglib.a		\
		$(PSG_OBJ) $(CND_PSG_OBJ) $(GEM_PSG_OBJ) $(KPSG_OBJ); fi; \
	echo "making libpsglibso";					\
	ld $(LDSOFLAGS) -o libpsglib.so.$(SHAREDLIB_VER)		\
		$(PSG_OBJ) $(CND_PSG_OBJ) $(GEM_PSG_OBJ) $(KPSG_OBJ);	\
	ln -s libpsglib.so.$(SHAREDLIB_VER) libpsglib.so;		\
	if [ x$$SOLARIS != "xy" ]; then					\
		rm -f $(PSG_OBJ) $(CND_PSG_OBJ)$(GEM_PGS_OBJ)$(KPSG_OBJ); fi )

getobj :
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		echo extract lib objects from library $(PSGLIB);	\
		ar xo $(PSGLIB) $(PSG_OBJ) $(CND_PSG_OBJ)		\
				 $(EGM_PSG_OBJ) $KPSG_OBJ;		\
	 fi)

getobjp :
	-@(umask 2; if [ x$$SOLARIS != "xy" ]; then			\
		echo extract lib objects from library $(PARMLIB);	\
		ar xo $(PARMLIB) $(VNMR_OBJ);				\
	 fi)

getobjv :
	@echo extract lib objects from library $(PSGLIB)
	-@ (umask 2; ar xo $(PSGLIB) $(PSG_OBJ) $(CND_PSG_OBJ)		\
			 $(GEM_PSG_OBJ) $(KPSG_OBJ) )

LINTFILES= $(VNMR_SRC) $(CND_PSG_SRC) $(PSG_SRC) $(GEM_PSG_SRC) $(KPSG_SRC)
lint: $(LINTFILES)
	$(LINK.c) $(LINTFILES)

fromlibs: $(OBJ) $(OBJS)
	(umask 2; $(LINK.c) -o $(ProgName) $(OBJ) $(OBJS) \
	   $(LINKLIB1) $(LINKLIB2) $(MISCLIBS) $(LIBS) )
#       (umask 2;$(LINK.c) -Qoption ld -M -o $(ProgName) $(OBJ) $(OBJS) \
#           $(LINKLIB1) $(LINKLIB2) $(MISCLIBS) $(LIBS)

#--- Object dependencies -------------------------------------------

$(ALLOBJS) : $(@:.o=.c)
	(umask 2; $(COMPILE.c) -DPSG_LC $(@:.o=.c) )

$(PSGSEQ_OBJ) : $(@:.o=.c)
	(umask 2; $(COMPILE.c) -I. $(@:.o=.c) )

#------ makefile extraction via SCCS allways. -------
$(MAKEFILE) : 
	$(KPSG_SGET) $@

#------------  Source Extraction via SCCS or Links ---------------

$(VNMR_SRC) $(VNMR_HDR) : $$(VNMR_SRC_DIR)$$(@)
	$(VNMR_GET) $@

$(PSGSEQ_SRC) $(PSGSEQ_HDR) : $$(PSGSEQ_SRC_DIR)$$(@)
	$(PSGSEQ_GET) $@

$(XRACQ_HDR) : $$(XRACQ_SRC_DIR)$$(@)
	$(XRACQ_GET) $@

$(EXPPROC_HDR) : $$(EXPPROC_SRC_DIR)$$(@)
	$(EXPPROC_GET) $@

$(GAPMON_HDR) : $$(GAPMON_SRC_DIR)$$(@)
	$(GAPMON_GET) $@

$(GEM_PSG_SRC) $(GEM_PSG_HDR) : $$(GEM_SRC_DIR)$$(@)
	$(GEM_GET) $@

$(KPSG_SRC) $(KPSG_HDR) makeuserpsg : $$(KPSG_SRC_DIR)$$(@)
	$(KPSG_GET) $@

$(NCOMM_HDR) : $$(NCOMM_SRC_DIR)$$(@)
	$(NCOMM_GET) $@
$(PSG_SRC) $(PSG_HDR) $(PSG_HDR_C) $(SPEC_PSG_SRC) $(USR_PSG_SRC) $(CND_PSG_SRC) $(LINTLIB_SRC) $(WFG_PSG_SRC) $(SEQGEN_MAKE) : $$(PSG_SRC_DIR)$$(@)
	$(PSG_GET) $@

$(SEQGEN_UTIL) : $$(SCRIPT_SRC_DIR)$$(@)
	$(SCRIPT_GET) $@

# s2pul uses <standard.h> which is screened out by depend script thus s2pul.o
# dependences are hardwired here..

s2pul.o: acqparms2.h
s2pul.o: rfconst.h
s2pul.o: wetfuncs.h

# DO NOT DELETE THIS LINE -- make depend uses it
# DEPENDENCIES MUST END AT END OF FILE

P_receive.o:  P_receive.c
P_receive.o: group.h
P_receive.o: symtab.h
P_receive.o: variables.h

abort.o: abort.c
abort.o: group.h

active.o: active.c
active.o: group.h
active.o: variables.h

allocate.o: allocate.c
allocate.o: allocate.h


apshape_pulse.o: apshape_pulse.c
apshape_pulse.o: acodes.h
apshape_pulse.o: rfconst.h
apshape_pulse.o: acqparms2.h
apshape_pulse.o: vnmrsys.h
apshape_pulse.o: vfilesys.h

aptable.o: aptable.c
aptable.o: acodes.h
aptable.o: acqparms2.h
aptable.o: aptable.h
aptable.o: group.h
aptable.o: symtab.h
aptable.o: variables.h
aptable.o: vfilesys.h

array.o: array.c
array.o: acqparms2.h
array.o: group.h
array.o: lc_gem.h
array.o: shims.h
array.o: variables.h

asmfuncs.o: asm.h

assign.o:  assign.c
assign.o: group.h
assign.o: params.h
assign.o: variables.h

convert.o: expDoneCodes.h
convert.o: REV_NUMS.h
convert.o: acodes.h
convert.o: acqparms2.h
convert.o: aptable.h
convert.o: abort.h

eventoverhead.o: eventoverhead.c
eventoverhead.o: apdelay.h

freq_list.o: freq_list.c
freq_list.o: vnmrsys.h
freq_list.o: acqparms2.h
freq_list.o: lc_gem.h
freq_list.o: acodes.h

getparm.o:  getparm.c

gradient.o: gradient.c
gradient.o: group.h
gradient.o: acodes.h
gradient.o: acqparms2.h
gradient.o: abort.h

initauto.o: initauto.c
initauto.o: acodes.h
initauto.o: acqparms2.h
initauto.o: rfconst.h
initauto.o: shims.h

hash.o:  hash.c

hwlooping.o: hwlooping.c
hwlooping.o: acodes.h
hwlooping.o: dsp.h
hwlooping.o: rfconst.h
hwlooping.o: acqparms2.h
hwlooping.o: lc_gem.h
hwlooping.o: shrexpinfo.h

lc_hdl.o: lc_hdl.c
lc_hdl.o: lc_gem.h
lc_hdl.o: acodes.h
lc_hdl.o: lc_index.h
lc_hdl.o: group.h
lc_hdl.o: shrexpinfo.h
lc_hdl.o: variables.h
lc_hdl.o: abort.h

lc_index.o: lc_index.c
lc_index.o: lc_index.h

meat.o:  meat.c
meat.o:  acodes.h
meat.o:  aptable.h
meat.o:  dsp.h
meat.o:  group.h
meat.o:  lc_gem.h
meat.o:  params.h
meat.o:  pvars.h
meat.o:  rfconst.h
meat.o:  variables.h
meat.o:  abort.h

pre_fid_seq.o: pre_fid_seq.c

psg.o:  psg.c
psg.o:	abort.h
psg.o:	asm.h
psg.o:	group.h
psg.o:	lc_gem.h
psg.o:	lc_index.h
psg.o:	variables.h
psg.o:	data.h
psg.o:	shrexpinfo.h
psg.o:	vfilesys.h

pvars.o: pvars.c
pvars.o: group.h
pvars.o: params.h
pvars.o: symtab.h
pvars.o: variables.h
pvars.o: vnmrsys.h
pvars.o: wjunk.h

raparms.o: raparms.c
raparms.o: acqparms2.h
raparms.o: data.h
raparms.o: lc_gem.h
raparms.o: shrexpinfo.h
raparms.o: mfileObj.h

s2pul.o:  s2pul.c
s2pul.o:  abort.h
s2pul.o:  apdelay.h
s2pul.o:  aptable.h
s2pul.o:  acqparms2.h
s2pul.o:  rfconst.h
s2pul.o:  standard.h
s2pul.o:  PboxM_psg.h

sendasync.o:  sendasync.c

setparm.o:  setparm.c

signalhandler.o:  signalhandler.c

shims.o:  shims.c
shims.o:  shims.h

stubs.o:  stubs.c

symtab.o: symtab.c
symtab.o: symtab.h

tools.o:  tools.c
tools.o: tools.h
tools.o: vnmrsys.h

treefuncs.o: treefuncs.c
treefuncs.o: group.h
treefuncs.o: params.h
treefuncs.o: symtab.h
treefuncs.o: symtab.h
treefuncs.o: variables.h

variables1.o: variables1.c
variables1.o: graphics.h
variables1.o: group.h
variables1.o: init.h
variables1.o: params.h
variables1.o: symtab.h
variables1.o: variables.h

wetfuncs.o:  wetfuncs.c
wetfuncs.o:  acqparms2.h
wetfuncs.o:  rfconst.h

xmath.o: xmath.c
xmath.o: acqparms2.h
xmath.o: aptable.h
xmath.o: lc_gem.h
xmath.o: dpsdef.h
xmath.o: group.h
xmath.o: Pbox_psg.h
xmath.o: REV_NUMS.h

xmtr.o: xmtr.c
xmtr.o: rfconst.h
# DEPENDENCIES MUST END AT END OF FILE
# IF YOU PUT STUFF HERE IT WILL GO AWAY
# see make depend above
