"macro gs_mkshimmap"
"***************************************************************************"
"
" gs_mkshimmap - macro to generate a shim field map file"
" 		
" Details: The varian fid file is converted a into 32bit int file"
"          3dft is done on the file and the phase difference between the"
"          ____.1, ____.A and _____.B files are calculated => ph"
"          .int integer raw fid file; .ph phase file"
"          The the image __.B.mag is used to determine the threshold"
"	   base.B.fid is used to verify parameters"

"          Output are float and fdf files"
" 	   input is mapname.1.fid mapname.A,B.fid mapname.param header"
"	   header is a 3D, fdf header"
" 	   output is mapname.{1,A,B}.{ph,mag,wf}.{fdf}"
"          mapname.f{fdf}   - frequency file"
"	   shimmap.'gcoil'.param generated by gs_acqshimmap"
"          contains matrix size and tau value"
"	   and it is generated by gs_acqshimmap"
"	   base.B.fid is recalled to check FOV parameters"
"          
"          After generating the shimmaps, the files, shimmap.gcoil.date.{f,param}
"          and shimmap.gcoil.f are generated"


" Usage:   gs_mkshimmap"
"
" Author: S.Sukumar, Varian NMR, Palo Alto, CA, USA"
"
" Version: 030508"

" Limitations: Decctool file not checked"
"              Zerofill flag, zflag, must be set prior to shimmap acquisition
"              because shimmap.hdr (fdf header) file is generated at that time.	       

" BUGS: del, delref not checked"

"***************************************************************************"

$fdf = 'y'    "generate fdf files"
$cleanup = 'y'    "** if 'n' keep files, else delete unnecessary files **"
$macro = $0

$GSDIR = userdir+'/gshimdir/data/'
$GSCAL = userdir+'/gshimdir/calib/'
"retrieve parameters for checking"
$hdr = $GSDIR+'shimmap.hdr'  "header created by gs_acqshimmap"
exists($hdr,'file'):$ex
if($ex = 0) then
  write('error','%s: fdf header file, shimmap.hdr, not found: %s',$macro,$hdr)
  abort
endif

"round off fov parameters and init shimmap filename"
format(lro,3,1):lro
format(lpe,3,1):lpe
format(lpe2,3,1):lpe2
$lr0 = lro*10  "mm"
$lr1 = lpe*10
$lr2 = lpe2*10
$l0='' $l1='' $l2=''
format($lr0,0,0):$l0
format($lr1,0,0):$l1
format($lr2,0,0):$l2

$date=''
shell('date +%Y-%b-%d'):$date
$shimpar = $GSCAL+'shimmap.'+gcoil+shimpar+'.param' "created by gs_acqshimmap"
$shimpar2 = $GSCAL+'shimmap.'+gcoil+shimpar+'.param.'+$date "copy with date stamp"
$shimmapf = 'shimmap.'+gcoil+shimpar+'.f' 
$shimmapf1 = $GSCAL+$shimmapf
$shimmapf2 =  $GSCAL+'shimmap.'+gcoil+shimpar+'.f.'+$date  "copy with date stamp"

"** read in shim parameters **"
lookup('mfile',$shimpar,'filekey'):$key

lookup('mfile',$key,'seek','#DATASIZE','read','read','read', 'read'):$sz1,$sz2,$sz3,$zf

lookup('mfile',$key,'seek','#FOV-MM','read','read','read'):$f1,$f2,$f3
lookup('mfile',$key,'seek','#DELAY-MSEC','read'):$delay
lookup('mfile',$key,'seek','#THRESHOLD-PERCENT','read'):$thresh
lookup('mfile',$key,'seek','#REFERENCE-DELAY-MSEC','read'):$delayref
lookup('mfile',$key,'seek','#NO-OF-SHIMS','read'):$maxshims
lookup('mfile',$key,'seek','#SHIM','readline','filekey'):$tmp,$key

"** shimmap.param file created in gshimdir/data/ **"   
$name = 'shimmap.param' 
$name = $GSDIR+$name
shell('/bin/rm -f '+$name)
  
write('reset',$name)  "create param file"
write('file',$name,'#DATASIZE')
"Note zflag must be set when shimmaps are acquired because shimmap.hdr is"
"generated at that time"
if($zf = 2) then
  write('file',$name,'%3d  %3d  %3d 2',$sz1,$sz2,$sz3)
else
  write('file',$name,'%3d  %3d  %3d 1',$sz1,$sz2,$sz3) 
endif

  write('file',$name,'#FOV-MM')
  write('file',$name,'%6.0f  %6.0f  %6.0f ',$f1,$f2,$f3)   
  write('file',$name, '#DELAY-MSEC')
  write('file',$name, '%6.2f',$delay)   
  write('file',$name, '#THRESHOLD-PERCENT')
  write('file',$name, '%6.0f ',thresh)   "taken from current workspace parameters"
  write('file',$name, '#REFERENCE-DELAY-MSEC')
  write('file',$name, '%6.3f',$delayref)   
  
  "** write shim info **"
  write('file',$name, '#NO-OF-SHIMS')
  write('file',$name,'%2d',maxshims)
  write('file',$name, '#SHIM\tOFFSET\tUNITS\tMAP\tADJUST')  
  
"** read shim info: #SHIM	OFFSET	UNITS	MAP	ADJUST "
$i = 1
$unit=''
while ($i <= $maxshims) do
  lookup('mfile',$key,'read','read','read','read','read','filekey'):$shim[$i],$st,$u,$map[$i],$aj,$key
  
    write('file',$name,$shim[$i]+'\t%4d\t%s\t%4d\t%4d',
                   $st,$u,$map[$i],$aj)  
  $i = $i+1
endwhile

shell('/bin/rm -f '+$GSDIR+'*.fdf')     "remove all fdf files" 
$mapit = 'y'   "set to y for first pass for base field"

$shimparam = $name  "data/shimmap.param updated with new threshold value"
$i = 0
while ($i <= $maxshims) do    " loops through (maxshims+1)"
  if ($i = 0) then            " if 1st pass measure residual (base) field"
    $name = 'base'
  else     
    $name = $shim[$i]	" shim name"
    if ($map[$i] = 1) then " was map data collected and need to be mapped"
      $mapit = 'y'
    else 
      $mapit = 'n'
    endif  
  endif

  if ($mapit = 'y') then   
    $rootname = $GSDIR+$name
    $rootname1 = $GSDIR+$name+'.1'
    $rootname2 = $GSDIR+$name+'.2'
    $rootnameA = $GSDIR+$name+'.A'
    $rootnameB = $GSDIR+$name+'.B'   
    
    shell('/bin/rm -f '+$rootname+'*.bin')
    shell('/bin/rm -f '+$rootname+'*.mag')    
    shell('/bin/rm -f '+$rootname+'*.ph')
    shell('/bin/rm -f '+$rootname+'*.wf')
    shell('/bin/rm -f '+$rootname+'*.f')
    shell('/bin/rm -f '+$rootname+'*.mag')
        
if (nt = 1) then 
  "dc correction"
  shell('gsbin '+$rootname1+' '+$rootname1+'.bin dc')  "base.1.bin created"
  shell('gsbin '+$rootnameB+' '+$rootnameB+'.bin dc')  
  shell('gsbin '+$rootnameA+' '+$rootnameA+'.bin dc')  
else
  shell('gsbin '+$rootname1+' '+$rootname1+'.bin')  
  shell('gsbin '+$rootnameB+' '+$rootnameB+'.bin')  
  shell('gsbin '+$rootnameA+' '+$rootnameA+'.bin')  
endif        

    "symbolic link to shimmap.gcoil.param"
    shell('/bin/rm -f '+$rootname+'.param')
    shell('ln -s '+$shimparam+' '+$rootname+'.param')  "data/shimmap.param file linked"
        
    if ($name = 'base') then
      write('line3',$name)
      "** ft and generate the above files **"
      shell('/bin/rm -rf '+$rootname2+'.bin') 
      shell('ln -s '+$rootnameA+'.bin '+$rootname2+'.bin') 
      shell('gsft '+$rootname)  " => b.{1,2}.mag, b.{1.2}.ph "
      shell('mv '+$rootname2+'.mag '+$rootnameA+'.mag')    
      shell('gsphdiff '+$rootname)  "b.2.ph - b.1.ph => b.wf"    
      shell('/bin/rm -f '+$rootname+'.A.wf')
      shell('mv '+$rootname+'.wf '+$rootname+'.A.wf')
      shell('/bin/rm -f '+$rootname2+'.bin')
      shell('ln -s '+$rootnameB+'.bin '+$rootname2+'.bin')
      shell('gsft '+$rootname)
      shell('cp '+$rootname2+'.mag '+$rootnameB+'.mag') 
      shell('gsphdiff '+$rootname)   " => b.wf" 
      shell('/bin/rm -f '+$rootnameB+'.wf')
      shell('mv '+$rootname+'.wf '+$rootname+'.B.wf')
      "* base.B.mag used for thresholding by gsfield *"
      "* base.f created "
      shell('ln -s '+$GSDIR+'base.B.mag '+$rootname+'.mag')
      shell('gsfield '+$rootname)    "b.A.wf, b.B.wf ,b.mag => b.f " 
      shell('/bin/rm -f '+$shimmapf1)    "remove old shim calibration file"  
    else   
      write('line3',$name)
      shell('/bin/rm -f '+$rootname2+'.bin')   
      shell('ln -s '+$rootnameA+'.bin '+$rootname2+'.bin')      
      shell('gsft '+$rootname)       " => z1.1,2(A).mag, z1.1,2.ph "
      shell('mv '+$rootname2+'.mag '+$rootnameA+'.mag')
      shell('gsphdiff '+$rootname)   "  z1.2.ph-z1.1.ph => z1.wf created "
      shell('/bin/rm -f '+$rootnameA+'.wf')
      shell('mv '+$rootname+'.wf '+$rootnameA+'.wf')
      "* create symbolic links to base file, and remove base field *"
      "** repeat for B file **"
      shell('/bin/rm -f '+$rootname2+'.bin')   
      shell('ln -s '+$rootnameB+'.bin '+$rootname2+'.bin')      
      shell('gsft '+$rootname)       " => z1.1,2.mag, z1.1,2.ph "
      shell('mv '+$rootname2+'.mag '+$rootnameB+'.mag')
      shell('gsphdiff '+$rootname)   "  z1.2.ph-z1.1.ph => z1.wf created "
      shell('/bin/rm -f '+$rootnameB+'.wf')
      shell('mv '+$rootname+'.wf '+$rootnameB+'.wf')
                 
      "* rootname.B.mag used for thresholding by gsfield *"
      "shell('ln -s '+$GSDIR+'base.B.mag '+$rootname+'.mag')"
      shell('ln -s '+$rootnameB+'.mag '+$rootname+'.mag')      
      shell('gsfield '+$rootname) "determine frequency z1.A,B.wf, z1.2.mag => z1.f"
      
      "* remove basefield from shimfield *"
      shell('/bin/rm -f '+$rootname1)
      shell('ln -s '+$GSDIR+'base.f '+$rootname1)
      "*** commented out for debugging"
      shell('mv '+$rootname+'.f '+$rootname2)  
      shell('gsdiff '+$rootname)   "Note: z1.f re-created"
         
      "** generate a single shimmap **"
      shell('cat '+$rootname+'.f >> '+$shimmapf1)

          "** clean up tmp files **"
      shell('/bin/rm -rf '+$GSDIR+'tmp*')
      shell('/bin/rm -f '+$rootname+'.param')
      shell('/bin/rm -f '+$rootname1) 
      shell('/bin/rm -f '+$rootname2)              
    endif
      "** create fdf files for viewing if necessary **"
    if ($fdf = 'y') then
        shell('fdfgluer '+$hdr+' '+$rootname1+'.mag '+$rootname1+'.mag.fdf')
        shell('fdfgluer '+$hdr+' '+$rootnameA+'.mag '+$rootnameA+'.mag.fdf')
        shell('fdfgluer '+$hdr+' '+$rootnameB+'.mag '+$rootnameB+'.mag.fdf')
        "shell('fdfgluer '+$hdr+' '+$rootname1+'.ph '+$rootname1+'.ph.fdf')"
        "shell('fdfgluer '+$hdr+' '+$rootnameA+'.ph '+$rootnameA+'.ph.fdf')"
        "shell('fdfgluer '+$hdr+' '+$rootnameB+'.ph '+$rootnameB+'.ph.fdf')"
        shell('fdfgluer '+$hdr+' '+$rootnameA+'.wf '+$rootnameA+'.wf.fdf')
    endif 
     
        shell('fdfgluer '+$hdr+' '+$rootnameB+'.wf '+$rootnameB+'.wf.fdf')
        shell('fdfgluer '+$hdr+' '+$rootname+'.f '+$rootname+'.f.fdf')
  endif
  $i = $i + 1  
endwhile

"delete intermediate files "
if ($cleanup = 'y') then
  shell('/bin/rm -f '+$GSDIR+'*.ph')
  shell('/bin/rm -f '+$GSDIR+'*.mag')
  shell('/bin/rm -f '+$GSDIR+'*.wf')
  shell('/bin/rm -f '+$GSDIR+'*.bin')
  shell('/bin/rm -f '+$GSDIR+'*.f')
endif

shell('cp '+$shimmapf1+' '+$shimmapf2)   "make a copy with a date stamp"
shell('cp '+$shimpar+' '+$shimpar2)  "make a copy of the parameter file"
write('line3','Done - Shimmap file created => %s',$shimmapf)

"If system administrator (vnmr1) copy shimmap...par,f files to /vnmr/gshimdir/calib"
"local copy of the files kept for reprocessing"
$sys='' $sysowner=''
shell('ls -l '+systemdir+'/conpar'):$sys substr($sys,3):$sysowner
if (owner = $sysowner) then
  if(shimpar = '.atp') then  "if called during ATP abort"
    abort
  endif
  $ffile = systemdir+'/gshimdir/calib/shimmap.'+gcoil+shimpar+'.f'
  $pfile = systemdir+'/gshimdir/calib/shimmap.'+gcoil+shimpar+'.f'
  
  exists(systemdir+'/gshimdir','file'):$e
  if $e=0 then mkdir(systemdir+'/gshimdir') endif
  exists(systemdir+'/gshimdir/calib','file'):$e
  if $e=0 then mkdir(systemdir+'/gshimdir/calib') endif

  exists($ffile,'file'):$ex
  if($ex > 0) then
    $message = 'Copy shimmap files into system directory'
    confirm($message):$response
    if ($response = 1)  then            
      shell('rm -f '+$ffile)
      shell('rm -f '+$pfile)
      shell('cp '+$shimpar+' '+systemdir+'/gshimdir/calib') 
      shell('cp '+$shimmapf1+' '+systemdir+'/gshimdir/calib') 
      write('line3','Shimmaps copied into system directory')
    else
      write('line3','Shimmaps not copied to system directory')    
    endif
  else
       shell('rm -f '+$ffile)
      shell('rm -f '+$pfile)
      shell('cp '+$shimpar+' '+systemdir+'/gshimdir/calib') 
      shell('cp '+$shimmapf1+' '+systemdir+'/gshimdir/calib') 
      write('line3','Shimmaps copied into system directory')   
  endif
endif



"******************************************************************************************"
"  		Modification History"

" 021105(ss) FOV checked and included in filename"
" 021106(ss) fdf header created"
" 030508(ss) unroll not used; gsfield with 3 fids used"
" 030522(ss) gsdiff used"
" 030916(ss): gsbin replaces stripv. gsbin does dcrmv"
" 050615     shimmap and parameter filenames changed"
" 060922     shimmaps copied into system directory"
" 071112     if called during ATP needn't save files in system dir.

"******************************************************************************************"
