"macro setgpropsems"
/******************************************************************
*  setgropsems: Set up standard sems sequence to calibrate the
*  gpropdelay parameter for gradient propagation delay
*
*  The optimum value of gpropdelay will be written to the gradtable
*  file for the gradient coil currently selected by gcoil
*
*  This procedure requires that the system be externally triggered.
*  The easiest way to do this is to connect the 60Hz line sync on
*  the back of the system power supply to the External Trigger
*  input
*  
*  To use this setup procedure, first load the standard SEMS
*  protocol, then run setgpropsems.  The initial protocol will be
*  modified.  When the calibration is complete, discard this protocol.
*
*  ARR   Version 1.0   7/20/11  
*******************************************************************/

"-- Check for proper gcoil value --------------------------"
if (gcoil = '') or (gcoil = 'None') or (gcoil = 'none') then
  write('error','Configure gcoil before proceeding')
  return
endif

"-- Check existence of file in gradtables -----------------"
$table = systemdir+'/imaging/gradtables/'+gcoil
exists($table,'file'):$ex1
if $ex1 < 0.5 then
  write('error','%s',$prog+'Cannot locate requested gradtable file')
  return
endif

if ($# = 0) then
  "-- Read gradtables file ----------------------------------"
  edit_sysgcoil('read')

  "-- Measurement uses standard GEMS sequence ---------------"
  if (seqfil <> 'sems') then
    write('error','Load sems protocol before running setgpropsems')
    return  
  endif

  if (ns > 1) then
    write('error','setgpropsems: set number of slices to 1')
    return
  endif

  create('gpropdelay','pulse','current',0)
  create('gxdelay','pulse','current',0)
  create('gydelay','pulse','current',0)
  create('gzdelay','pulse','current',0)
  create('b0delay','pulse','current',0)
  gxdelay = 0 gydelay = 0 gzdelay = 0 b0delay = 0 gpropdelay = 0
  phi = 0 psi = 0 theta = 0

  wnt = ''
  ticks = 1
  tr = 1
  minte = 'n' te=.03
  im2D('prep','profile') go('check')
  wexp = 'setgpropsems(\'proc\')'

  if ((array <> '') OR (arraydim > 1)) then
    write('error','setgpropsems: one or more parameters are arrayed')
    return
  endif

  "*** set up parallel arrays, order here is critical to build up repeats of gpropdelay for each read axis ***"
  setarray('gpropdelay',0,5,21)
  gpropdelay = gpropdelay,gpropdelay,gpropdelay  // repeat groups of gpropdelay for each orientation
  setarray('r1',0,0,21)                          // temp array of 0s
  setarray('r2',90,0,21)                         // temp array of 90s
  "*** orient axial90, axial, sag, to get X, Y, Z along read ***"
  psi = r1,r1,r2                                 // 0,0,90 concatenate blocks of 21 values
  phi = r2,r1,r1                                 // 90,0,0
  theta = r1,r1,r2                               // 0,0,90
  array = '(psi,phi,theta,gpropdelay)'
  au
  write('line3','gradadvance calibration started; make sure external trigger is connected')
endif  "Initialize and start scan"

/*---------------------------------------------------------
* Process and analyze data, update gpropdelay value in gradtables file
* This section is entered with the 'proc' option: setgpropsems('proc')
*---------------------------------------------------------*/
if ($# = 1) then
  if ($1 <> 'proc') then
    write('error','Use setgpropsems(\'proc\') to process')
    abort
  endif

  filter(20)
  wft
  f full

  pa lp = np*90
  select(1) vsadj(180) vp = wc2/2  wp = sw/5  sp = sw/2-wp/2
  vo = 0 ho = 0 wc = wcmax/3
  $delta = 2*sw/fn                               // distance between points in spectrum
  $size = arraydim/3

  $group = 0 sc = 2*wcmax/3
  clear(2)
  repeat
    sc = (2-$group)*wcmax/3
    $i = 0
    repeat
      $i = $i + 1
      select($i+$group*$size)
      if ($i = 1) then
        mark(sw/2):$phase  rp = rp - $phase
        dssn($group*$size+1,$group*$size+$size)
      endif
      $j = 0
      repeat                                       // loop over several points around center of profile
        $j = $j + 1
        $cr = sw/2 - (4-$j)*$delta                 // shift point by point for mark
        mark($cr):$ph[$j]                          // get value of phase at each point
        $x[$j] = $j                                // dummy X values for fit of slope each profile
      until ($j = 7)
      fm_slope($x,$ph):$slopeprofile[$i]           // fit slope of phase for each profile
      $gprop[$i] = gpropdelay[$i]                  // X axis is array of gpropdelay values
    until ($i = arraydim/3)
    $group = $group + 1
    fm_slope($gprop,$slopeprofile):$slopeslopes[$group],$int[$group],$corr[$group]     // fit array of slopes
    $delay[$group] = -$int[$group]/$slopeslopes[$group]
  write('line3','slopeslopes=%.3f   intercept=%.3f    corr=%.6f    delay=%.3f',$slopeslopes[$group],$int[$group],$corr[$group],$delay[$group])
  until ($group = 3)

  $max = $delay[1]
  if ($delay[2] > $max) then $max = $delay[2] endif
  if ($delay[3] > $max) then $max = $delay[3] endif

  $gpropdelay = $max
  $gxdelay = $gpropdelay - $delay[1]
  $gydelay = $gpropdelay - $delay[2]
  $gzdelay = $gpropdelay - $delay[3]

  "*** Update current gradtable file ***"
  gcoil_params[12] = $gpropdelay
  gcoil_params[13] = $gxdelay
  gcoil_params[14] = $gydelay
  gcoil_params[15] = $gzdelay
  edit_sysgcoil('save')
  phi = 0 psi = 0 theta = 0                      // reset angles
  _gcoil                                         // load updated values from gradtables

  write('line3','gpropdelay=%.1f  gxdelay=%.1f  gydelay=%.1f  gzdelay=%.1f. Load any protocol to continue.',$gpropdelay,$gxdelay,$gydelay,$gzdelay)
endif  "process and analyze"

