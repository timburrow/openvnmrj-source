"macro im3D"
"Setup and Processing for 3D imaging sequences"

"**********************************************************"
" Parse input                                              "
"**********************************************************"
"Default options"
g3dpars
$action = 'prep'
$action2 = ''

if ($# > 0) then
  $action = $1
endif
if ($# > 1) then
  $action2 = $2
endif

isvnmrj:$vj
exists('profile','parameter'):$profile

"**********************************************************"
" Setup                                                    "
"**********************************************************"
if ($action = 'prep') then

  if ($action2 = 'shim') then 
    im3D('prep','profile') 
    return 
  endif

  ldrf
  setgro   "Set readout gradient and bandwidth"
  calcdim  "Set array & arraydim parameters"

  create('slabfract','real','current',1)

  exists('slabctr','parameter'):$ex
  $iplanType=iplanType
  if ($ex > 0) then if (slabctr = 'y') then
    pss0 = ppe2   "Center slab selection on FOV in 2nd PE direction"
    gplan('addType','slices')
    gplan('setValue','pss0',ppe2)
    gplan('alternateSlices',sliceorder)
    gplan('clearStacks')
  endif endif
  iplanType=$iplanType

  seqcon('pe'):$pe    "is seqcon c or s for phase encode?"
  seqcon('pe2'):$pe2  "is seqcon c or s for 2nd phase encode?"
  if ($pe = 's' AND $pe2 = 's') then ss=ssc else ss=0 endif

  "Multiple receivers and multi echo sequences need external recon"
  if (ne>1 AND arraydim>acqcycles) then recon='external' endif

  "Multiple slabs need external recon"
  if (ns>1) then recon='external' endif
  
  "Defaults"
  slabix=1 element=1 echo=1
  aipAllslabs='n' aipAllelements='n' aipAllechoes='n'

  execseq('prep')  "Execute any sequence specific preparation"

  wnt = ''
  if ($action2 = 'profile') then
    if ($profile > 0) then
      profile = 'yy'
      sl=1 ec=1 rc=1 slices='single'
    else
      writeparam(curexp+'/im3D_params.par','nv nv2')
      nv  = 0
      nv2 = 0
    endif
    wexp  = 'im3D(`proc`,`profile`)'
    wdone = ''
    werr  = ''
  elseif ($action2 = 'image2d_pe') then
    profile = 'ny'  /* No phase encoding in 2nd PE dimension */
    wexp  = 'im3D(`proc`,`image2d`)'
    wdone = ''
    werr  = ''
  elseif ($action2 = 'image2d_pe2') then
    profile = 'yn'  /* No phase encoding in 1st PE dimension */
    wexp  = 'im3D(`proc`,`image2d`)'
    wdone = ''
    werr  = ''
  else
    if ($profile > 0) then 
       profile = 'nn' 
    endif
  endif

  setloop                                  // initialize nf, nfmod, ni and ni2 to std values

  aipXrecon('getnvols'):volumes            // set the number of data volumes


"**********************************************************"
" Processing & Display                                     "
"**********************************************************"
elseif ($action = 'proc') then

  if ($action2 = 'profile') then
    im2D('proc','profile')
    return
  elseif ($action2 = 'image2d') then
    if (recon = 'internal') OR (recon = '') then   "use internal recon_all"
      f full cf = 1
      recon_all
      aipDeleteData
      aipLoadDir(curexp+'/recon')
      aipDisplay('all')
      return
    else  "external recon"
      im2D('proc')
    endif
  endif
  
  if ((nv > 0) and (nv2 > 0) and (profile = 'nn')) then
    if (recon = 'internal') OR (recon = '') then   "use internal recon_all"
      recon_all
    else  "external recon"
      write('line3','ADVISORY: Using external recon ...')
      flush
      "Clear old data"
      aipXrecon('cleardata')
      $cmd = 'Xrecon -v '+curexp+' >'+curexp+'/Xrecon.txt 2>&1'
      shell($cmd):$trash
      clear
      cat(curexp+'/Xrecon.txt')
    endif
    
    on('fn2'):$onfn
    if ($onfn = 1) then $nv2 = fn2 else $nv2 = nv2 endif

    if ($vj > 0) then
      aipDeleteData
      if (recon = 'internal') OR (recon = '') then
        aipLoadFile(curexp+'/datadir3d/data/img_slab001image001echo001.fdf')  "This enables the Extract page"
      else
        aipLoadFile(curexp+'/recon/slab001image001echo001.fdf')  "This enables the Extract page"
      endif
      if ($action2 = 'mip') then
        aipExtractMip('xy',0,$nv2-1,1) "Display ROxPE images"
      else
        aipExtract('xy',0,$nv2-1,1) "Display ROxPE images"
      endif
    endif
  else
    if ((nv > 0) and (profile <> 'yy')) then "really a 2D experiment"
      im2D('proc')
    else "really a 1D experiment"
      cf = 1
      im1D('proc')
      av
    endif
  endif

  $vp = ''
  xm1('vp'):$vp
  "Review VP"
  if ($vp = 'review') then
    aipData='reprocessed'
  endif

  execseq('proc')  "Execute any sequence specific processing"


"**********************************************************"
" Gain                                                     "
"**********************************************************"
elseif ($action = 'prescan') then                // Enter through execprescan
  im3D('gain','init')
elseif ($action = 'gain') then
  $gainstart = 0                                 // Set low gain to acquire data
  $gainfraction = 0.5                            // fraction of ADC to fill
  $paramfile = curexp+'/tempparams'              // store some parameters to be reset after prescan
 
  if ($action2 = 'init') then                    // initialize params and acquire data
    writeparam($paramfile,'nt,ssc,ss')           // back up parameters to be reset after processing
    im3D('prep','image2d_pe')                    // set up for a 2D projection
    nfmod = nf
    nt = 1
    $seqcon = ''
    $tr = tr
    exists('trseg','parameter'):$ex
    if ($ex) then max(tr,trseg):$tr endif        // for segmented sequences, use trseg instead of tr
    $ss = 1/(2*$tr) + 2                          // estimate ss based on TR
    substr(seqcon,3,1):$seqcon
    if ($seqcon = 'c') then ssc = $ss else ss = $ss endif
    gain = $gainstart
    wnt = ''
    wdone = ''
    werr = ''
    wexp = 'im3D(\'gain\',\'proc\')'
    au

  elseif ($action2 = 'proc') then                // process gain scan when complete
    cf='n'                                       // cf=n tells fidmax to look at entire data block
    fidmaxarray:$fidmax                          // find highest data value
    $factor = $gainfraction*32767/$fidmax
    ln($factor):$ln
    $gain = 20*$ln/2.303                         // calculate gain change based on fidmax and gainfraction
    if ($gainstart + $gain < 0) then
      write('line3','Advisory: gain set to minimum value of 0')
      gain = 0
    elseif ($gainstart + $gain > 60) then
      write('line3','Advisory: low signal, gain set to maximum value of 60')
      gain = 60
    else
      gain = $gain + $gainstart                  // set computed gain, then delete gain params
    endif
    readparam($paramfile,'nt,ssc,ss')            // restore original parameter values
    cf = 1
  endif

endif
